
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ProctoringSession
 * 
 */
export type ProctoringSession = $Result.DefaultSelection<Prisma.$ProctoringSessionPayload>
/**
 * Model Violation
 * 
 */
export type Violation = $Result.DefaultSelection<Prisma.$ViolationPayload>
/**
 * Model SessionAnalytic
 * 
 */
export type SessionAnalytic = $Result.DefaultSelection<Prisma.$SessionAnalyticPayload>
/**
 * Model IdentityVerification
 * 
 */
export type IdentityVerification = $Result.DefaultSelection<Prisma.$IdentityVerificationPayload>
/**
 * Model PlagiarismReport
 * 
 */
export type PlagiarismReport = $Result.DefaultSelection<Prisma.$PlagiarismReportPayload>
/**
 * Model AdminIntervention
 * 
 */
export type AdminIntervention = $Result.DefaultSelection<Prisma.$AdminInterventionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ProctoringSessions
 * const proctoringSessions = await prisma.proctoringSession.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ProctoringSessions
   * const proctoringSessions = await prisma.proctoringSession.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.proctoringSession`: Exposes CRUD operations for the **ProctoringSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProctoringSessions
    * const proctoringSessions = await prisma.proctoringSession.findMany()
    * ```
    */
  get proctoringSession(): Prisma.ProctoringSessionDelegate<ExtArgs>;

  /**
   * `prisma.violation`: Exposes CRUD operations for the **Violation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Violations
    * const violations = await prisma.violation.findMany()
    * ```
    */
  get violation(): Prisma.ViolationDelegate<ExtArgs>;

  /**
   * `prisma.sessionAnalytic`: Exposes CRUD operations for the **SessionAnalytic** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionAnalytics
    * const sessionAnalytics = await prisma.sessionAnalytic.findMany()
    * ```
    */
  get sessionAnalytic(): Prisma.SessionAnalyticDelegate<ExtArgs>;

  /**
   * `prisma.identityVerification`: Exposes CRUD operations for the **IdentityVerification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IdentityVerifications
    * const identityVerifications = await prisma.identityVerification.findMany()
    * ```
    */
  get identityVerification(): Prisma.IdentityVerificationDelegate<ExtArgs>;

  /**
   * `prisma.plagiarismReport`: Exposes CRUD operations for the **PlagiarismReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlagiarismReports
    * const plagiarismReports = await prisma.plagiarismReport.findMany()
    * ```
    */
  get plagiarismReport(): Prisma.PlagiarismReportDelegate<ExtArgs>;

  /**
   * `prisma.adminIntervention`: Exposes CRUD operations for the **AdminIntervention** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdminInterventions
    * const adminInterventions = await prisma.adminIntervention.findMany()
    * ```
    */
  get adminIntervention(): Prisma.AdminInterventionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ProctoringSession: 'ProctoringSession',
    Violation: 'Violation',
    SessionAnalytic: 'SessionAnalytic',
    IdentityVerification: 'IdentityVerification',
    PlagiarismReport: 'PlagiarismReport',
    AdminIntervention: 'AdminIntervention'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "proctoringSession" | "violation" | "sessionAnalytic" | "identityVerification" | "plagiarismReport" | "adminIntervention"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ProctoringSession: {
        payload: Prisma.$ProctoringSessionPayload<ExtArgs>
        fields: Prisma.ProctoringSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProctoringSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProctoringSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>
          }
          findFirst: {
            args: Prisma.ProctoringSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProctoringSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>
          }
          findMany: {
            args: Prisma.ProctoringSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>[]
          }
          create: {
            args: Prisma.ProctoringSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>
          }
          createMany: {
            args: Prisma.ProctoringSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProctoringSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>[]
          }
          delete: {
            args: Prisma.ProctoringSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>
          }
          update: {
            args: Prisma.ProctoringSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>
          }
          deleteMany: {
            args: Prisma.ProctoringSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProctoringSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProctoringSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProctoringSessionPayload>
          }
          aggregate: {
            args: Prisma.ProctoringSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProctoringSession>
          }
          groupBy: {
            args: Prisma.ProctoringSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProctoringSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProctoringSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ProctoringSessionCountAggregateOutputType> | number
          }
        }
      }
      Violation: {
        payload: Prisma.$ViolationPayload<ExtArgs>
        fields: Prisma.ViolationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViolationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViolationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          findFirst: {
            args: Prisma.ViolationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViolationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          findMany: {
            args: Prisma.ViolationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>[]
          }
          create: {
            args: Prisma.ViolationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          createMany: {
            args: Prisma.ViolationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ViolationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>[]
          }
          delete: {
            args: Prisma.ViolationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          update: {
            args: Prisma.ViolationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          deleteMany: {
            args: Prisma.ViolationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ViolationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ViolationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ViolationPayload>
          }
          aggregate: {
            args: Prisma.ViolationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateViolation>
          }
          groupBy: {
            args: Prisma.ViolationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ViolationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViolationCountArgs<ExtArgs>
            result: $Utils.Optional<ViolationCountAggregateOutputType> | number
          }
        }
      }
      SessionAnalytic: {
        payload: Prisma.$SessionAnalyticPayload<ExtArgs>
        fields: Prisma.SessionAnalyticFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionAnalyticFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionAnalyticFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>
          }
          findFirst: {
            args: Prisma.SessionAnalyticFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionAnalyticFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>
          }
          findMany: {
            args: Prisma.SessionAnalyticFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>[]
          }
          create: {
            args: Prisma.SessionAnalyticCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>
          }
          createMany: {
            args: Prisma.SessionAnalyticCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionAnalyticCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>[]
          }
          delete: {
            args: Prisma.SessionAnalyticDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>
          }
          update: {
            args: Prisma.SessionAnalyticUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>
          }
          deleteMany: {
            args: Prisma.SessionAnalyticDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionAnalyticUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionAnalyticUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionAnalyticPayload>
          }
          aggregate: {
            args: Prisma.SessionAnalyticAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionAnalytic>
          }
          groupBy: {
            args: Prisma.SessionAnalyticGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionAnalyticGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionAnalyticCountArgs<ExtArgs>
            result: $Utils.Optional<SessionAnalyticCountAggregateOutputType> | number
          }
        }
      }
      IdentityVerification: {
        payload: Prisma.$IdentityVerificationPayload<ExtArgs>
        fields: Prisma.IdentityVerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IdentityVerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IdentityVerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>
          }
          findFirst: {
            args: Prisma.IdentityVerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IdentityVerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>
          }
          findMany: {
            args: Prisma.IdentityVerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>[]
          }
          create: {
            args: Prisma.IdentityVerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>
          }
          createMany: {
            args: Prisma.IdentityVerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IdentityVerificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>[]
          }
          delete: {
            args: Prisma.IdentityVerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>
          }
          update: {
            args: Prisma.IdentityVerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>
          }
          deleteMany: {
            args: Prisma.IdentityVerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IdentityVerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IdentityVerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IdentityVerificationPayload>
          }
          aggregate: {
            args: Prisma.IdentityVerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIdentityVerification>
          }
          groupBy: {
            args: Prisma.IdentityVerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<IdentityVerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.IdentityVerificationCountArgs<ExtArgs>
            result: $Utils.Optional<IdentityVerificationCountAggregateOutputType> | number
          }
        }
      }
      PlagiarismReport: {
        payload: Prisma.$PlagiarismReportPayload<ExtArgs>
        fields: Prisma.PlagiarismReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlagiarismReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlagiarismReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>
          }
          findFirst: {
            args: Prisma.PlagiarismReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlagiarismReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>
          }
          findMany: {
            args: Prisma.PlagiarismReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>[]
          }
          create: {
            args: Prisma.PlagiarismReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>
          }
          createMany: {
            args: Prisma.PlagiarismReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlagiarismReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>[]
          }
          delete: {
            args: Prisma.PlagiarismReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>
          }
          update: {
            args: Prisma.PlagiarismReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>
          }
          deleteMany: {
            args: Prisma.PlagiarismReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlagiarismReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlagiarismReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlagiarismReportPayload>
          }
          aggregate: {
            args: Prisma.PlagiarismReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlagiarismReport>
          }
          groupBy: {
            args: Prisma.PlagiarismReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlagiarismReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlagiarismReportCountArgs<ExtArgs>
            result: $Utils.Optional<PlagiarismReportCountAggregateOutputType> | number
          }
        }
      }
      AdminIntervention: {
        payload: Prisma.$AdminInterventionPayload<ExtArgs>
        fields: Prisma.AdminInterventionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminInterventionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminInterventionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>
          }
          findFirst: {
            args: Prisma.AdminInterventionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminInterventionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>
          }
          findMany: {
            args: Prisma.AdminInterventionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>[]
          }
          create: {
            args: Prisma.AdminInterventionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>
          }
          createMany: {
            args: Prisma.AdminInterventionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminInterventionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>[]
          }
          delete: {
            args: Prisma.AdminInterventionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>
          }
          update: {
            args: Prisma.AdminInterventionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>
          }
          deleteMany: {
            args: Prisma.AdminInterventionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminInterventionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminInterventionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminInterventionPayload>
          }
          aggregate: {
            args: Prisma.AdminInterventionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdminIntervention>
          }
          groupBy: {
            args: Prisma.AdminInterventionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminInterventionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminInterventionCountArgs<ExtArgs>
            result: $Utils.Optional<AdminInterventionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProctoringSessionCountOutputType
   */

  export type ProctoringSessionCountOutputType = {
    violations: number
    analytics: number
    identityVerifications: number
    plagiarismReports: number
    adminInterventions: number
  }

  export type ProctoringSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violations?: boolean | ProctoringSessionCountOutputTypeCountViolationsArgs
    analytics?: boolean | ProctoringSessionCountOutputTypeCountAnalyticsArgs
    identityVerifications?: boolean | ProctoringSessionCountOutputTypeCountIdentityVerificationsArgs
    plagiarismReports?: boolean | ProctoringSessionCountOutputTypeCountPlagiarismReportsArgs
    adminInterventions?: boolean | ProctoringSessionCountOutputTypeCountAdminInterventionsArgs
  }

  // Custom InputTypes
  /**
   * ProctoringSessionCountOutputType without action
   */
  export type ProctoringSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSessionCountOutputType
     */
    select?: ProctoringSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProctoringSessionCountOutputType without action
   */
  export type ProctoringSessionCountOutputTypeCountViolationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViolationWhereInput
  }

  /**
   * ProctoringSessionCountOutputType without action
   */
  export type ProctoringSessionCountOutputTypeCountAnalyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionAnalyticWhereInput
  }

  /**
   * ProctoringSessionCountOutputType without action
   */
  export type ProctoringSessionCountOutputTypeCountIdentityVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdentityVerificationWhereInput
  }

  /**
   * ProctoringSessionCountOutputType without action
   */
  export type ProctoringSessionCountOutputTypeCountPlagiarismReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlagiarismReportWhereInput
  }

  /**
   * ProctoringSessionCountOutputType without action
   */
  export type ProctoringSessionCountOutputTypeCountAdminInterventionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminInterventionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ProctoringSession
   */

  export type AggregateProctoringSession = {
    _count: ProctoringSessionCountAggregateOutputType | null
    _avg: ProctoringSessionAvgAggregateOutputType | null
    _sum: ProctoringSessionSumAggregateOutputType | null
    _min: ProctoringSessionMinAggregateOutputType | null
    _max: ProctoringSessionMaxAggregateOutputType | null
  }

  export type ProctoringSessionAvgAggregateOutputType = {
    userId: number | null
    quizId: number | null
    riskScore: number | null
    violationsCount: number | null
  }

  export type ProctoringSessionSumAggregateOutputType = {
    userId: bigint | null
    quizId: bigint | null
    riskScore: number | null
    violationsCount: number | null
  }

  export type ProctoringSessionMinAggregateOutputType = {
    id: string | null
    userId: bigint | null
    quizId: bigint | null
    sessionToken: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    riskScore: number | null
    violationsCount: number | null
    identityVerified: boolean | null
    ipAddress: string | null
    userAgent: string | null
    browserFingerprint: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProctoringSessionMaxAggregateOutputType = {
    id: string | null
    userId: bigint | null
    quizId: bigint | null
    sessionToken: string | null
    startTime: Date | null
    endTime: Date | null
    status: string | null
    riskScore: number | null
    violationsCount: number | null
    identityVerified: boolean | null
    ipAddress: string | null
    userAgent: string | null
    browserFingerprint: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProctoringSessionCountAggregateOutputType = {
    id: number
    userId: number
    quizId: number
    sessionToken: number
    startTime: number
    endTime: number
    status: number
    riskScore: number
    violationsCount: number
    identityVerified: number
    ipAddress: number
    userAgent: number
    browserFingerprint: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProctoringSessionAvgAggregateInputType = {
    userId?: true
    quizId?: true
    riskScore?: true
    violationsCount?: true
  }

  export type ProctoringSessionSumAggregateInputType = {
    userId?: true
    quizId?: true
    riskScore?: true
    violationsCount?: true
  }

  export type ProctoringSessionMinAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    sessionToken?: true
    startTime?: true
    endTime?: true
    status?: true
    riskScore?: true
    violationsCount?: true
    identityVerified?: true
    ipAddress?: true
    userAgent?: true
    browserFingerprint?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProctoringSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    sessionToken?: true
    startTime?: true
    endTime?: true
    status?: true
    riskScore?: true
    violationsCount?: true
    identityVerified?: true
    ipAddress?: true
    userAgent?: true
    browserFingerprint?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProctoringSessionCountAggregateInputType = {
    id?: true
    userId?: true
    quizId?: true
    sessionToken?: true
    startTime?: true
    endTime?: true
    status?: true
    riskScore?: true
    violationsCount?: true
    identityVerified?: true
    ipAddress?: true
    userAgent?: true
    browserFingerprint?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProctoringSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProctoringSession to aggregate.
     */
    where?: ProctoringSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProctoringSessions to fetch.
     */
    orderBy?: ProctoringSessionOrderByWithRelationInput | ProctoringSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProctoringSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProctoringSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProctoringSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProctoringSessions
    **/
    _count?: true | ProctoringSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProctoringSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProctoringSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProctoringSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProctoringSessionMaxAggregateInputType
  }

  export type GetProctoringSessionAggregateType<T extends ProctoringSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateProctoringSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProctoringSession[P]>
      : GetScalarType<T[P], AggregateProctoringSession[P]>
  }




  export type ProctoringSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProctoringSessionWhereInput
    orderBy?: ProctoringSessionOrderByWithAggregationInput | ProctoringSessionOrderByWithAggregationInput[]
    by: ProctoringSessionScalarFieldEnum[] | ProctoringSessionScalarFieldEnum
    having?: ProctoringSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProctoringSessionCountAggregateInputType | true
    _avg?: ProctoringSessionAvgAggregateInputType
    _sum?: ProctoringSessionSumAggregateInputType
    _min?: ProctoringSessionMinAggregateInputType
    _max?: ProctoringSessionMaxAggregateInputType
  }

  export type ProctoringSessionGroupByOutputType = {
    id: string
    userId: bigint
    quizId: bigint
    sessionToken: string
    startTime: Date
    endTime: Date | null
    status: string
    riskScore: number
    violationsCount: number
    identityVerified: boolean
    ipAddress: string | null
    userAgent: string | null
    browserFingerprint: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProctoringSessionCountAggregateOutputType | null
    _avg: ProctoringSessionAvgAggregateOutputType | null
    _sum: ProctoringSessionSumAggregateOutputType | null
    _min: ProctoringSessionMinAggregateOutputType | null
    _max: ProctoringSessionMaxAggregateOutputType | null
  }

  type GetProctoringSessionGroupByPayload<T extends ProctoringSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProctoringSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProctoringSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProctoringSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ProctoringSessionGroupByOutputType[P]>
        }
      >
    >


  export type ProctoringSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    sessionToken?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    riskScore?: boolean
    violationsCount?: boolean
    identityVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    browserFingerprint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    violations?: boolean | ProctoringSession$violationsArgs<ExtArgs>
    analytics?: boolean | ProctoringSession$analyticsArgs<ExtArgs>
    identityVerifications?: boolean | ProctoringSession$identityVerificationsArgs<ExtArgs>
    plagiarismReports?: boolean | ProctoringSession$plagiarismReportsArgs<ExtArgs>
    adminInterventions?: boolean | ProctoringSession$adminInterventionsArgs<ExtArgs>
    _count?: boolean | ProctoringSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proctoringSession"]>

  export type ProctoringSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    quizId?: boolean
    sessionToken?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    riskScore?: boolean
    violationsCount?: boolean
    identityVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    browserFingerprint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["proctoringSession"]>

  export type ProctoringSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    quizId?: boolean
    sessionToken?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    riskScore?: boolean
    violationsCount?: boolean
    identityVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    browserFingerprint?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProctoringSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    violations?: boolean | ProctoringSession$violationsArgs<ExtArgs>
    analytics?: boolean | ProctoringSession$analyticsArgs<ExtArgs>
    identityVerifications?: boolean | ProctoringSession$identityVerificationsArgs<ExtArgs>
    plagiarismReports?: boolean | ProctoringSession$plagiarismReportsArgs<ExtArgs>
    adminInterventions?: boolean | ProctoringSession$adminInterventionsArgs<ExtArgs>
    _count?: boolean | ProctoringSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProctoringSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProctoringSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProctoringSession"
    objects: {
      violations: Prisma.$ViolationPayload<ExtArgs>[]
      analytics: Prisma.$SessionAnalyticPayload<ExtArgs>[]
      identityVerifications: Prisma.$IdentityVerificationPayload<ExtArgs>[]
      plagiarismReports: Prisma.$PlagiarismReportPayload<ExtArgs>[]
      adminInterventions: Prisma.$AdminInterventionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: bigint
      quizId: bigint
      sessionToken: string
      startTime: Date
      endTime: Date | null
      status: string
      riskScore: number
      violationsCount: number
      identityVerified: boolean
      ipAddress: string | null
      userAgent: string | null
      browserFingerprint: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["proctoringSession"]>
    composites: {}
  }

  type ProctoringSessionGetPayload<S extends boolean | null | undefined | ProctoringSessionDefaultArgs> = $Result.GetResult<Prisma.$ProctoringSessionPayload, S>

  type ProctoringSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProctoringSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProctoringSessionCountAggregateInputType | true
    }

  export interface ProctoringSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProctoringSession'], meta: { name: 'ProctoringSession' } }
    /**
     * Find zero or one ProctoringSession that matches the filter.
     * @param {ProctoringSessionFindUniqueArgs} args - Arguments to find a ProctoringSession
     * @example
     * // Get one ProctoringSession
     * const proctoringSession = await prisma.proctoringSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProctoringSessionFindUniqueArgs>(args: SelectSubset<T, ProctoringSessionFindUniqueArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProctoringSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProctoringSessionFindUniqueOrThrowArgs} args - Arguments to find a ProctoringSession
     * @example
     * // Get one ProctoringSession
     * const proctoringSession = await prisma.proctoringSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProctoringSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProctoringSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProctoringSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionFindFirstArgs} args - Arguments to find a ProctoringSession
     * @example
     * // Get one ProctoringSession
     * const proctoringSession = await prisma.proctoringSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProctoringSessionFindFirstArgs>(args?: SelectSubset<T, ProctoringSessionFindFirstArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProctoringSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionFindFirstOrThrowArgs} args - Arguments to find a ProctoringSession
     * @example
     * // Get one ProctoringSession
     * const proctoringSession = await prisma.proctoringSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProctoringSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProctoringSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProctoringSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProctoringSessions
     * const proctoringSessions = await prisma.proctoringSession.findMany()
     * 
     * // Get first 10 ProctoringSessions
     * const proctoringSessions = await prisma.proctoringSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proctoringSessionWithIdOnly = await prisma.proctoringSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProctoringSessionFindManyArgs>(args?: SelectSubset<T, ProctoringSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProctoringSession.
     * @param {ProctoringSessionCreateArgs} args - Arguments to create a ProctoringSession.
     * @example
     * // Create one ProctoringSession
     * const ProctoringSession = await prisma.proctoringSession.create({
     *   data: {
     *     // ... data to create a ProctoringSession
     *   }
     * })
     * 
     */
    create<T extends ProctoringSessionCreateArgs>(args: SelectSubset<T, ProctoringSessionCreateArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProctoringSessions.
     * @param {ProctoringSessionCreateManyArgs} args - Arguments to create many ProctoringSessions.
     * @example
     * // Create many ProctoringSessions
     * const proctoringSession = await prisma.proctoringSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProctoringSessionCreateManyArgs>(args?: SelectSubset<T, ProctoringSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProctoringSessions and returns the data saved in the database.
     * @param {ProctoringSessionCreateManyAndReturnArgs} args - Arguments to create many ProctoringSessions.
     * @example
     * // Create many ProctoringSessions
     * const proctoringSession = await prisma.proctoringSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProctoringSessions and only return the `id`
     * const proctoringSessionWithIdOnly = await prisma.proctoringSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProctoringSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProctoringSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProctoringSession.
     * @param {ProctoringSessionDeleteArgs} args - Arguments to delete one ProctoringSession.
     * @example
     * // Delete one ProctoringSession
     * const ProctoringSession = await prisma.proctoringSession.delete({
     *   where: {
     *     // ... filter to delete one ProctoringSession
     *   }
     * })
     * 
     */
    delete<T extends ProctoringSessionDeleteArgs>(args: SelectSubset<T, ProctoringSessionDeleteArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProctoringSession.
     * @param {ProctoringSessionUpdateArgs} args - Arguments to update one ProctoringSession.
     * @example
     * // Update one ProctoringSession
     * const proctoringSession = await prisma.proctoringSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProctoringSessionUpdateArgs>(args: SelectSubset<T, ProctoringSessionUpdateArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProctoringSessions.
     * @param {ProctoringSessionDeleteManyArgs} args - Arguments to filter ProctoringSessions to delete.
     * @example
     * // Delete a few ProctoringSessions
     * const { count } = await prisma.proctoringSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProctoringSessionDeleteManyArgs>(args?: SelectSubset<T, ProctoringSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProctoringSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProctoringSessions
     * const proctoringSession = await prisma.proctoringSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProctoringSessionUpdateManyArgs>(args: SelectSubset<T, ProctoringSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProctoringSession.
     * @param {ProctoringSessionUpsertArgs} args - Arguments to update or create a ProctoringSession.
     * @example
     * // Update or create a ProctoringSession
     * const proctoringSession = await prisma.proctoringSession.upsert({
     *   create: {
     *     // ... data to create a ProctoringSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProctoringSession we want to update
     *   }
     * })
     */
    upsert<T extends ProctoringSessionUpsertArgs>(args: SelectSubset<T, ProctoringSessionUpsertArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProctoringSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionCountArgs} args - Arguments to filter ProctoringSessions to count.
     * @example
     * // Count the number of ProctoringSessions
     * const count = await prisma.proctoringSession.count({
     *   where: {
     *     // ... the filter for the ProctoringSessions we want to count
     *   }
     * })
    **/
    count<T extends ProctoringSessionCountArgs>(
      args?: Subset<T, ProctoringSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProctoringSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProctoringSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProctoringSessionAggregateArgs>(args: Subset<T, ProctoringSessionAggregateArgs>): Prisma.PrismaPromise<GetProctoringSessionAggregateType<T>>

    /**
     * Group by ProctoringSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProctoringSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProctoringSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProctoringSessionGroupByArgs['orderBy'] }
        : { orderBy?: ProctoringSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProctoringSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProctoringSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProctoringSession model
   */
  readonly fields: ProctoringSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProctoringSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProctoringSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    violations<T extends ProctoringSession$violationsArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSession$violationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findMany"> | Null>
    analytics<T extends ProctoringSession$analyticsArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSession$analyticsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "findMany"> | Null>
    identityVerifications<T extends ProctoringSession$identityVerificationsArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSession$identityVerificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "findMany"> | Null>
    plagiarismReports<T extends ProctoringSession$plagiarismReportsArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSession$plagiarismReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "findMany"> | Null>
    adminInterventions<T extends ProctoringSession$adminInterventionsArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSession$adminInterventionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProctoringSession model
   */ 
  interface ProctoringSessionFieldRefs {
    readonly id: FieldRef<"ProctoringSession", 'String'>
    readonly userId: FieldRef<"ProctoringSession", 'BigInt'>
    readonly quizId: FieldRef<"ProctoringSession", 'BigInt'>
    readonly sessionToken: FieldRef<"ProctoringSession", 'String'>
    readonly startTime: FieldRef<"ProctoringSession", 'DateTime'>
    readonly endTime: FieldRef<"ProctoringSession", 'DateTime'>
    readonly status: FieldRef<"ProctoringSession", 'String'>
    readonly riskScore: FieldRef<"ProctoringSession", 'Float'>
    readonly violationsCount: FieldRef<"ProctoringSession", 'Int'>
    readonly identityVerified: FieldRef<"ProctoringSession", 'Boolean'>
    readonly ipAddress: FieldRef<"ProctoringSession", 'String'>
    readonly userAgent: FieldRef<"ProctoringSession", 'String'>
    readonly browserFingerprint: FieldRef<"ProctoringSession", 'String'>
    readonly createdAt: FieldRef<"ProctoringSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ProctoringSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProctoringSession findUnique
   */
  export type ProctoringSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProctoringSession to fetch.
     */
    where: ProctoringSessionWhereUniqueInput
  }

  /**
   * ProctoringSession findUniqueOrThrow
   */
  export type ProctoringSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProctoringSession to fetch.
     */
    where: ProctoringSessionWhereUniqueInput
  }

  /**
   * ProctoringSession findFirst
   */
  export type ProctoringSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProctoringSession to fetch.
     */
    where?: ProctoringSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProctoringSessions to fetch.
     */
    orderBy?: ProctoringSessionOrderByWithRelationInput | ProctoringSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProctoringSessions.
     */
    cursor?: ProctoringSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProctoringSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProctoringSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProctoringSessions.
     */
    distinct?: ProctoringSessionScalarFieldEnum | ProctoringSessionScalarFieldEnum[]
  }

  /**
   * ProctoringSession findFirstOrThrow
   */
  export type ProctoringSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProctoringSession to fetch.
     */
    where?: ProctoringSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProctoringSessions to fetch.
     */
    orderBy?: ProctoringSessionOrderByWithRelationInput | ProctoringSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProctoringSessions.
     */
    cursor?: ProctoringSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProctoringSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProctoringSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProctoringSessions.
     */
    distinct?: ProctoringSessionScalarFieldEnum | ProctoringSessionScalarFieldEnum[]
  }

  /**
   * ProctoringSession findMany
   */
  export type ProctoringSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProctoringSessions to fetch.
     */
    where?: ProctoringSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProctoringSessions to fetch.
     */
    orderBy?: ProctoringSessionOrderByWithRelationInput | ProctoringSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProctoringSessions.
     */
    cursor?: ProctoringSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProctoringSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProctoringSessions.
     */
    skip?: number
    distinct?: ProctoringSessionScalarFieldEnum | ProctoringSessionScalarFieldEnum[]
  }

  /**
   * ProctoringSession create
   */
  export type ProctoringSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProctoringSession.
     */
    data: XOR<ProctoringSessionCreateInput, ProctoringSessionUncheckedCreateInput>
  }

  /**
   * ProctoringSession createMany
   */
  export type ProctoringSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProctoringSessions.
     */
    data: ProctoringSessionCreateManyInput | ProctoringSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProctoringSession createManyAndReturn
   */
  export type ProctoringSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProctoringSessions.
     */
    data: ProctoringSessionCreateManyInput | ProctoringSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProctoringSession update
   */
  export type ProctoringSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProctoringSession.
     */
    data: XOR<ProctoringSessionUpdateInput, ProctoringSessionUncheckedUpdateInput>
    /**
     * Choose, which ProctoringSession to update.
     */
    where: ProctoringSessionWhereUniqueInput
  }

  /**
   * ProctoringSession updateMany
   */
  export type ProctoringSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProctoringSessions.
     */
    data: XOR<ProctoringSessionUpdateManyMutationInput, ProctoringSessionUncheckedUpdateManyInput>
    /**
     * Filter which ProctoringSessions to update
     */
    where?: ProctoringSessionWhereInput
  }

  /**
   * ProctoringSession upsert
   */
  export type ProctoringSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProctoringSession to update in case it exists.
     */
    where: ProctoringSessionWhereUniqueInput
    /**
     * In case the ProctoringSession found by the `where` argument doesn't exist, create a new ProctoringSession with this data.
     */
    create: XOR<ProctoringSessionCreateInput, ProctoringSessionUncheckedCreateInput>
    /**
     * In case the ProctoringSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProctoringSessionUpdateInput, ProctoringSessionUncheckedUpdateInput>
  }

  /**
   * ProctoringSession delete
   */
  export type ProctoringSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
    /**
     * Filter which ProctoringSession to delete.
     */
    where: ProctoringSessionWhereUniqueInput
  }

  /**
   * ProctoringSession deleteMany
   */
  export type ProctoringSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProctoringSessions to delete
     */
    where?: ProctoringSessionWhereInput
  }

  /**
   * ProctoringSession.violations
   */
  export type ProctoringSession$violationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    where?: ViolationWhereInput
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    cursor?: ViolationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * ProctoringSession.analytics
   */
  export type ProctoringSession$analyticsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    where?: SessionAnalyticWhereInput
    orderBy?: SessionAnalyticOrderByWithRelationInput | SessionAnalyticOrderByWithRelationInput[]
    cursor?: SessionAnalyticWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionAnalyticScalarFieldEnum | SessionAnalyticScalarFieldEnum[]
  }

  /**
   * ProctoringSession.identityVerifications
   */
  export type ProctoringSession$identityVerificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    where?: IdentityVerificationWhereInput
    orderBy?: IdentityVerificationOrderByWithRelationInput | IdentityVerificationOrderByWithRelationInput[]
    cursor?: IdentityVerificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IdentityVerificationScalarFieldEnum | IdentityVerificationScalarFieldEnum[]
  }

  /**
   * ProctoringSession.plagiarismReports
   */
  export type ProctoringSession$plagiarismReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    where?: PlagiarismReportWhereInput
    orderBy?: PlagiarismReportOrderByWithRelationInput | PlagiarismReportOrderByWithRelationInput[]
    cursor?: PlagiarismReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlagiarismReportScalarFieldEnum | PlagiarismReportScalarFieldEnum[]
  }

  /**
   * ProctoringSession.adminInterventions
   */
  export type ProctoringSession$adminInterventionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    where?: AdminInterventionWhereInput
    orderBy?: AdminInterventionOrderByWithRelationInput | AdminInterventionOrderByWithRelationInput[]
    cursor?: AdminInterventionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminInterventionScalarFieldEnum | AdminInterventionScalarFieldEnum[]
  }

  /**
   * ProctoringSession without action
   */
  export type ProctoringSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProctoringSession
     */
    select?: ProctoringSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProctoringSessionInclude<ExtArgs> | null
  }


  /**
   * Model Violation
   */

  export type AggregateViolation = {
    _count: ViolationCountAggregateOutputType | null
    _avg: ViolationAvgAggregateOutputType | null
    _sum: ViolationSumAggregateOutputType | null
    _min: ViolationMinAggregateOutputType | null
    _max: ViolationMaxAggregateOutputType | null
  }

  export type ViolationAvgAggregateOutputType = {
    confidence: number | null
  }

  export type ViolationSumAggregateOutputType = {
    confidence: number | null
  }

  export type ViolationMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    type: string | null
    description: string | null
    confidence: number | null
    severity: string | null
    screenshotUrl: string | null
    detectedAt: Date | null
    processed: boolean | null
    actionTaken: string | null
  }

  export type ViolationMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    type: string | null
    description: string | null
    confidence: number | null
    severity: string | null
    screenshotUrl: string | null
    detectedAt: Date | null
    processed: boolean | null
    actionTaken: string | null
  }

  export type ViolationCountAggregateOutputType = {
    id: number
    sessionId: number
    type: number
    description: number
    confidence: number
    severity: number
    screenshotUrl: number
    metadata: number
    detectedAt: number
    processed: number
    actionTaken: number
    _all: number
  }


  export type ViolationAvgAggregateInputType = {
    confidence?: true
  }

  export type ViolationSumAggregateInputType = {
    confidence?: true
  }

  export type ViolationMinAggregateInputType = {
    id?: true
    sessionId?: true
    type?: true
    description?: true
    confidence?: true
    severity?: true
    screenshotUrl?: true
    detectedAt?: true
    processed?: true
    actionTaken?: true
  }

  export type ViolationMaxAggregateInputType = {
    id?: true
    sessionId?: true
    type?: true
    description?: true
    confidence?: true
    severity?: true
    screenshotUrl?: true
    detectedAt?: true
    processed?: true
    actionTaken?: true
  }

  export type ViolationCountAggregateInputType = {
    id?: true
    sessionId?: true
    type?: true
    description?: true
    confidence?: true
    severity?: true
    screenshotUrl?: true
    metadata?: true
    detectedAt?: true
    processed?: true
    actionTaken?: true
    _all?: true
  }

  export type ViolationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Violation to aggregate.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Violations
    **/
    _count?: true | ViolationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ViolationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ViolationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViolationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViolationMaxAggregateInputType
  }

  export type GetViolationAggregateType<T extends ViolationAggregateArgs> = {
        [P in keyof T & keyof AggregateViolation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViolation[P]>
      : GetScalarType<T[P], AggregateViolation[P]>
  }




  export type ViolationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViolationWhereInput
    orderBy?: ViolationOrderByWithAggregationInput | ViolationOrderByWithAggregationInput[]
    by: ViolationScalarFieldEnum[] | ViolationScalarFieldEnum
    having?: ViolationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViolationCountAggregateInputType | true
    _avg?: ViolationAvgAggregateInputType
    _sum?: ViolationSumAggregateInputType
    _min?: ViolationMinAggregateInputType
    _max?: ViolationMaxAggregateInputType
  }

  export type ViolationGroupByOutputType = {
    id: string
    sessionId: string
    type: string
    description: string | null
    confidence: number
    severity: string
    screenshotUrl: string | null
    metadata: JsonValue | null
    detectedAt: Date
    processed: boolean
    actionTaken: string | null
    _count: ViolationCountAggregateOutputType | null
    _avg: ViolationAvgAggregateOutputType | null
    _sum: ViolationSumAggregateOutputType | null
    _min: ViolationMinAggregateOutputType | null
    _max: ViolationMaxAggregateOutputType | null
  }

  type GetViolationGroupByPayload<T extends ViolationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViolationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViolationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViolationGroupByOutputType[P]>
            : GetScalarType<T[P], ViolationGroupByOutputType[P]>
        }
      >
    >


  export type ViolationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    type?: boolean
    description?: boolean
    confidence?: boolean
    severity?: boolean
    screenshotUrl?: boolean
    metadata?: boolean
    detectedAt?: boolean
    processed?: boolean
    actionTaken?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["violation"]>

  export type ViolationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    type?: boolean
    description?: boolean
    confidence?: boolean
    severity?: boolean
    screenshotUrl?: boolean
    metadata?: boolean
    detectedAt?: boolean
    processed?: boolean
    actionTaken?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["violation"]>

  export type ViolationSelectScalar = {
    id?: boolean
    sessionId?: boolean
    type?: boolean
    description?: boolean
    confidence?: boolean
    severity?: boolean
    screenshotUrl?: boolean
    metadata?: boolean
    detectedAt?: boolean
    processed?: boolean
    actionTaken?: boolean
  }

  export type ViolationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }
  export type ViolationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }

  export type $ViolationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Violation"
    objects: {
      session: Prisma.$ProctoringSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      type: string
      description: string | null
      confidence: number
      severity: string
      screenshotUrl: string | null
      metadata: Prisma.JsonValue | null
      detectedAt: Date
      processed: boolean
      actionTaken: string | null
    }, ExtArgs["result"]["violation"]>
    composites: {}
  }

  type ViolationGetPayload<S extends boolean | null | undefined | ViolationDefaultArgs> = $Result.GetResult<Prisma.$ViolationPayload, S>

  type ViolationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ViolationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ViolationCountAggregateInputType | true
    }

  export interface ViolationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Violation'], meta: { name: 'Violation' } }
    /**
     * Find zero or one Violation that matches the filter.
     * @param {ViolationFindUniqueArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ViolationFindUniqueArgs>(args: SelectSubset<T, ViolationFindUniqueArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Violation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ViolationFindUniqueOrThrowArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ViolationFindUniqueOrThrowArgs>(args: SelectSubset<T, ViolationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Violation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationFindFirstArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ViolationFindFirstArgs>(args?: SelectSubset<T, ViolationFindFirstArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Violation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationFindFirstOrThrowArgs} args - Arguments to find a Violation
     * @example
     * // Get one Violation
     * const violation = await prisma.violation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ViolationFindFirstOrThrowArgs>(args?: SelectSubset<T, ViolationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Violations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Violations
     * const violations = await prisma.violation.findMany()
     * 
     * // Get first 10 Violations
     * const violations = await prisma.violation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const violationWithIdOnly = await prisma.violation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ViolationFindManyArgs>(args?: SelectSubset<T, ViolationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Violation.
     * @param {ViolationCreateArgs} args - Arguments to create a Violation.
     * @example
     * // Create one Violation
     * const Violation = await prisma.violation.create({
     *   data: {
     *     // ... data to create a Violation
     *   }
     * })
     * 
     */
    create<T extends ViolationCreateArgs>(args: SelectSubset<T, ViolationCreateArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Violations.
     * @param {ViolationCreateManyArgs} args - Arguments to create many Violations.
     * @example
     * // Create many Violations
     * const violation = await prisma.violation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ViolationCreateManyArgs>(args?: SelectSubset<T, ViolationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Violations and returns the data saved in the database.
     * @param {ViolationCreateManyAndReturnArgs} args - Arguments to create many Violations.
     * @example
     * // Create many Violations
     * const violation = await prisma.violation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Violations and only return the `id`
     * const violationWithIdOnly = await prisma.violation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ViolationCreateManyAndReturnArgs>(args?: SelectSubset<T, ViolationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Violation.
     * @param {ViolationDeleteArgs} args - Arguments to delete one Violation.
     * @example
     * // Delete one Violation
     * const Violation = await prisma.violation.delete({
     *   where: {
     *     // ... filter to delete one Violation
     *   }
     * })
     * 
     */
    delete<T extends ViolationDeleteArgs>(args: SelectSubset<T, ViolationDeleteArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Violation.
     * @param {ViolationUpdateArgs} args - Arguments to update one Violation.
     * @example
     * // Update one Violation
     * const violation = await prisma.violation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ViolationUpdateArgs>(args: SelectSubset<T, ViolationUpdateArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Violations.
     * @param {ViolationDeleteManyArgs} args - Arguments to filter Violations to delete.
     * @example
     * // Delete a few Violations
     * const { count } = await prisma.violation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ViolationDeleteManyArgs>(args?: SelectSubset<T, ViolationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Violations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Violations
     * const violation = await prisma.violation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ViolationUpdateManyArgs>(args: SelectSubset<T, ViolationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Violation.
     * @param {ViolationUpsertArgs} args - Arguments to update or create a Violation.
     * @example
     * // Update or create a Violation
     * const violation = await prisma.violation.upsert({
     *   create: {
     *     // ... data to create a Violation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Violation we want to update
     *   }
     * })
     */
    upsert<T extends ViolationUpsertArgs>(args: SelectSubset<T, ViolationUpsertArgs<ExtArgs>>): Prisma__ViolationClient<$Result.GetResult<Prisma.$ViolationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Violations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationCountArgs} args - Arguments to filter Violations to count.
     * @example
     * // Count the number of Violations
     * const count = await prisma.violation.count({
     *   where: {
     *     // ... the filter for the Violations we want to count
     *   }
     * })
    **/
    count<T extends ViolationCountArgs>(
      args?: Subset<T, ViolationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViolationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Violation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViolationAggregateArgs>(args: Subset<T, ViolationAggregateArgs>): Prisma.PrismaPromise<GetViolationAggregateType<T>>

    /**
     * Group by Violation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViolationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViolationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViolationGroupByArgs['orderBy'] }
        : { orderBy?: ViolationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViolationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViolationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Violation model
   */
  readonly fields: ViolationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Violation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViolationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ProctoringSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSessionDefaultArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Violation model
   */ 
  interface ViolationFieldRefs {
    readonly id: FieldRef<"Violation", 'String'>
    readonly sessionId: FieldRef<"Violation", 'String'>
    readonly type: FieldRef<"Violation", 'String'>
    readonly description: FieldRef<"Violation", 'String'>
    readonly confidence: FieldRef<"Violation", 'Float'>
    readonly severity: FieldRef<"Violation", 'String'>
    readonly screenshotUrl: FieldRef<"Violation", 'String'>
    readonly metadata: FieldRef<"Violation", 'Json'>
    readonly detectedAt: FieldRef<"Violation", 'DateTime'>
    readonly processed: FieldRef<"Violation", 'Boolean'>
    readonly actionTaken: FieldRef<"Violation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Violation findUnique
   */
  export type ViolationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation findUniqueOrThrow
   */
  export type ViolationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation findFirst
   */
  export type ViolationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Violations.
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Violations.
     */
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * Violation findFirstOrThrow
   */
  export type ViolationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violation to fetch.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Violations.
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Violations.
     */
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * Violation findMany
   */
  export type ViolationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter, which Violations to fetch.
     */
    where?: ViolationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Violations to fetch.
     */
    orderBy?: ViolationOrderByWithRelationInput | ViolationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Violations.
     */
    cursor?: ViolationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Violations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Violations.
     */
    skip?: number
    distinct?: ViolationScalarFieldEnum | ViolationScalarFieldEnum[]
  }

  /**
   * Violation create
   */
  export type ViolationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * The data needed to create a Violation.
     */
    data: XOR<ViolationCreateInput, ViolationUncheckedCreateInput>
  }

  /**
   * Violation createMany
   */
  export type ViolationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Violations.
     */
    data: ViolationCreateManyInput | ViolationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Violation createManyAndReturn
   */
  export type ViolationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Violations.
     */
    data: ViolationCreateManyInput | ViolationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Violation update
   */
  export type ViolationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * The data needed to update a Violation.
     */
    data: XOR<ViolationUpdateInput, ViolationUncheckedUpdateInput>
    /**
     * Choose, which Violation to update.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation updateMany
   */
  export type ViolationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Violations.
     */
    data: XOR<ViolationUpdateManyMutationInput, ViolationUncheckedUpdateManyInput>
    /**
     * Filter which Violations to update
     */
    where?: ViolationWhereInput
  }

  /**
   * Violation upsert
   */
  export type ViolationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * The filter to search for the Violation to update in case it exists.
     */
    where: ViolationWhereUniqueInput
    /**
     * In case the Violation found by the `where` argument doesn't exist, create a new Violation with this data.
     */
    create: XOR<ViolationCreateInput, ViolationUncheckedCreateInput>
    /**
     * In case the Violation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViolationUpdateInput, ViolationUncheckedUpdateInput>
  }

  /**
   * Violation delete
   */
  export type ViolationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
    /**
     * Filter which Violation to delete.
     */
    where: ViolationWhereUniqueInput
  }

  /**
   * Violation deleteMany
   */
  export type ViolationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Violations to delete
     */
    where?: ViolationWhereInput
  }

  /**
   * Violation without action
   */
  export type ViolationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Violation
     */
    select?: ViolationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ViolationInclude<ExtArgs> | null
  }


  /**
   * Model SessionAnalytic
   */

  export type AggregateSessionAnalytic = {
    _count: SessionAnalyticCountAggregateOutputType | null
    _avg: SessionAnalyticAvgAggregateOutputType | null
    _sum: SessionAnalyticSumAggregateOutputType | null
    _min: SessionAnalyticMinAggregateOutputType | null
    _max: SessionAnalyticMaxAggregateOutputType | null
  }

  export type SessionAnalyticAvgAggregateOutputType = {
    mouseMovements: number | null
    keystrokeCount: number | null
    focusLossCount: number | null
    tabSwitches: number | null
    windowBlurCount: number | null
  }

  export type SessionAnalyticSumAggregateOutputType = {
    mouseMovements: number | null
    keystrokeCount: number | null
    focusLossCount: number | null
    tabSwitches: number | null
    windowBlurCount: number | null
  }

  export type SessionAnalyticMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    eventType: string | null
    mouseMovements: number | null
    keystrokeCount: number | null
    focusLossCount: number | null
    tabSwitches: number | null
    windowBlurCount: number | null
    recordedAt: Date | null
  }

  export type SessionAnalyticMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    eventType: string | null
    mouseMovements: number | null
    keystrokeCount: number | null
    focusLossCount: number | null
    tabSwitches: number | null
    windowBlurCount: number | null
    recordedAt: Date | null
  }

  export type SessionAnalyticCountAggregateOutputType = {
    id: number
    sessionId: number
    eventType: number
    eventData: number
    mouseMovements: number
    keystrokeCount: number
    focusLossCount: number
    tabSwitches: number
    windowBlurCount: number
    recordedAt: number
    _all: number
  }


  export type SessionAnalyticAvgAggregateInputType = {
    mouseMovements?: true
    keystrokeCount?: true
    focusLossCount?: true
    tabSwitches?: true
    windowBlurCount?: true
  }

  export type SessionAnalyticSumAggregateInputType = {
    mouseMovements?: true
    keystrokeCount?: true
    focusLossCount?: true
    tabSwitches?: true
    windowBlurCount?: true
  }

  export type SessionAnalyticMinAggregateInputType = {
    id?: true
    sessionId?: true
    eventType?: true
    mouseMovements?: true
    keystrokeCount?: true
    focusLossCount?: true
    tabSwitches?: true
    windowBlurCount?: true
    recordedAt?: true
  }

  export type SessionAnalyticMaxAggregateInputType = {
    id?: true
    sessionId?: true
    eventType?: true
    mouseMovements?: true
    keystrokeCount?: true
    focusLossCount?: true
    tabSwitches?: true
    windowBlurCount?: true
    recordedAt?: true
  }

  export type SessionAnalyticCountAggregateInputType = {
    id?: true
    sessionId?: true
    eventType?: true
    eventData?: true
    mouseMovements?: true
    keystrokeCount?: true
    focusLossCount?: true
    tabSwitches?: true
    windowBlurCount?: true
    recordedAt?: true
    _all?: true
  }

  export type SessionAnalyticAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionAnalytic to aggregate.
     */
    where?: SessionAnalyticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionAnalytics to fetch.
     */
    orderBy?: SessionAnalyticOrderByWithRelationInput | SessionAnalyticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionAnalyticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionAnalytics
    **/
    _count?: true | SessionAnalyticCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAnalyticAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionAnalyticSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionAnalyticMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionAnalyticMaxAggregateInputType
  }

  export type GetSessionAnalyticAggregateType<T extends SessionAnalyticAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionAnalytic]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionAnalytic[P]>
      : GetScalarType<T[P], AggregateSessionAnalytic[P]>
  }




  export type SessionAnalyticGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionAnalyticWhereInput
    orderBy?: SessionAnalyticOrderByWithAggregationInput | SessionAnalyticOrderByWithAggregationInput[]
    by: SessionAnalyticScalarFieldEnum[] | SessionAnalyticScalarFieldEnum
    having?: SessionAnalyticScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionAnalyticCountAggregateInputType | true
    _avg?: SessionAnalyticAvgAggregateInputType
    _sum?: SessionAnalyticSumAggregateInputType
    _min?: SessionAnalyticMinAggregateInputType
    _max?: SessionAnalyticMaxAggregateInputType
  }

  export type SessionAnalyticGroupByOutputType = {
    id: string
    sessionId: string
    eventType: string
    eventData: JsonValue | null
    mouseMovements: number
    keystrokeCount: number
    focusLossCount: number
    tabSwitches: number
    windowBlurCount: number
    recordedAt: Date
    _count: SessionAnalyticCountAggregateOutputType | null
    _avg: SessionAnalyticAvgAggregateOutputType | null
    _sum: SessionAnalyticSumAggregateOutputType | null
    _min: SessionAnalyticMinAggregateOutputType | null
    _max: SessionAnalyticMaxAggregateOutputType | null
  }

  type GetSessionAnalyticGroupByPayload<T extends SessionAnalyticGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionAnalyticGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionAnalyticGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionAnalyticGroupByOutputType[P]>
            : GetScalarType<T[P], SessionAnalyticGroupByOutputType[P]>
        }
      >
    >


  export type SessionAnalyticSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    eventType?: boolean
    eventData?: boolean
    mouseMovements?: boolean
    keystrokeCount?: boolean
    focusLossCount?: boolean
    tabSwitches?: boolean
    windowBlurCount?: boolean
    recordedAt?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionAnalytic"]>

  export type SessionAnalyticSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    eventType?: boolean
    eventData?: boolean
    mouseMovements?: boolean
    keystrokeCount?: boolean
    focusLossCount?: boolean
    tabSwitches?: boolean
    windowBlurCount?: boolean
    recordedAt?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionAnalytic"]>

  export type SessionAnalyticSelectScalar = {
    id?: boolean
    sessionId?: boolean
    eventType?: boolean
    eventData?: boolean
    mouseMovements?: boolean
    keystrokeCount?: boolean
    focusLossCount?: boolean
    tabSwitches?: boolean
    windowBlurCount?: boolean
    recordedAt?: boolean
  }

  export type SessionAnalyticInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }
  export type SessionAnalyticIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }

  export type $SessionAnalyticPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionAnalytic"
    objects: {
      session: Prisma.$ProctoringSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      eventType: string
      eventData: Prisma.JsonValue | null
      mouseMovements: number
      keystrokeCount: number
      focusLossCount: number
      tabSwitches: number
      windowBlurCount: number
      recordedAt: Date
    }, ExtArgs["result"]["sessionAnalytic"]>
    composites: {}
  }

  type SessionAnalyticGetPayload<S extends boolean | null | undefined | SessionAnalyticDefaultArgs> = $Result.GetResult<Prisma.$SessionAnalyticPayload, S>

  type SessionAnalyticCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionAnalyticFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionAnalyticCountAggregateInputType | true
    }

  export interface SessionAnalyticDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionAnalytic'], meta: { name: 'SessionAnalytic' } }
    /**
     * Find zero or one SessionAnalytic that matches the filter.
     * @param {SessionAnalyticFindUniqueArgs} args - Arguments to find a SessionAnalytic
     * @example
     * // Get one SessionAnalytic
     * const sessionAnalytic = await prisma.sessionAnalytic.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionAnalyticFindUniqueArgs>(args: SelectSubset<T, SessionAnalyticFindUniqueArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SessionAnalytic that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionAnalyticFindUniqueOrThrowArgs} args - Arguments to find a SessionAnalytic
     * @example
     * // Get one SessionAnalytic
     * const sessionAnalytic = await prisma.sessionAnalytic.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionAnalyticFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionAnalyticFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SessionAnalytic that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticFindFirstArgs} args - Arguments to find a SessionAnalytic
     * @example
     * // Get one SessionAnalytic
     * const sessionAnalytic = await prisma.sessionAnalytic.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionAnalyticFindFirstArgs>(args?: SelectSubset<T, SessionAnalyticFindFirstArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SessionAnalytic that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticFindFirstOrThrowArgs} args - Arguments to find a SessionAnalytic
     * @example
     * // Get one SessionAnalytic
     * const sessionAnalytic = await prisma.sessionAnalytic.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionAnalyticFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionAnalyticFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SessionAnalytics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionAnalytics
     * const sessionAnalytics = await prisma.sessionAnalytic.findMany()
     * 
     * // Get first 10 SessionAnalytics
     * const sessionAnalytics = await prisma.sessionAnalytic.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionAnalyticWithIdOnly = await prisma.sessionAnalytic.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionAnalyticFindManyArgs>(args?: SelectSubset<T, SessionAnalyticFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SessionAnalytic.
     * @param {SessionAnalyticCreateArgs} args - Arguments to create a SessionAnalytic.
     * @example
     * // Create one SessionAnalytic
     * const SessionAnalytic = await prisma.sessionAnalytic.create({
     *   data: {
     *     // ... data to create a SessionAnalytic
     *   }
     * })
     * 
     */
    create<T extends SessionAnalyticCreateArgs>(args: SelectSubset<T, SessionAnalyticCreateArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SessionAnalytics.
     * @param {SessionAnalyticCreateManyArgs} args - Arguments to create many SessionAnalytics.
     * @example
     * // Create many SessionAnalytics
     * const sessionAnalytic = await prisma.sessionAnalytic.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionAnalyticCreateManyArgs>(args?: SelectSubset<T, SessionAnalyticCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionAnalytics and returns the data saved in the database.
     * @param {SessionAnalyticCreateManyAndReturnArgs} args - Arguments to create many SessionAnalytics.
     * @example
     * // Create many SessionAnalytics
     * const sessionAnalytic = await prisma.sessionAnalytic.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionAnalytics and only return the `id`
     * const sessionAnalyticWithIdOnly = await prisma.sessionAnalytic.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionAnalyticCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionAnalyticCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SessionAnalytic.
     * @param {SessionAnalyticDeleteArgs} args - Arguments to delete one SessionAnalytic.
     * @example
     * // Delete one SessionAnalytic
     * const SessionAnalytic = await prisma.sessionAnalytic.delete({
     *   where: {
     *     // ... filter to delete one SessionAnalytic
     *   }
     * })
     * 
     */
    delete<T extends SessionAnalyticDeleteArgs>(args: SelectSubset<T, SessionAnalyticDeleteArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SessionAnalytic.
     * @param {SessionAnalyticUpdateArgs} args - Arguments to update one SessionAnalytic.
     * @example
     * // Update one SessionAnalytic
     * const sessionAnalytic = await prisma.sessionAnalytic.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionAnalyticUpdateArgs>(args: SelectSubset<T, SessionAnalyticUpdateArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SessionAnalytics.
     * @param {SessionAnalyticDeleteManyArgs} args - Arguments to filter SessionAnalytics to delete.
     * @example
     * // Delete a few SessionAnalytics
     * const { count } = await prisma.sessionAnalytic.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionAnalyticDeleteManyArgs>(args?: SelectSubset<T, SessionAnalyticDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionAnalytics
     * const sessionAnalytic = await prisma.sessionAnalytic.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionAnalyticUpdateManyArgs>(args: SelectSubset<T, SessionAnalyticUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionAnalytic.
     * @param {SessionAnalyticUpsertArgs} args - Arguments to update or create a SessionAnalytic.
     * @example
     * // Update or create a SessionAnalytic
     * const sessionAnalytic = await prisma.sessionAnalytic.upsert({
     *   create: {
     *     // ... data to create a SessionAnalytic
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionAnalytic we want to update
     *   }
     * })
     */
    upsert<T extends SessionAnalyticUpsertArgs>(args: SelectSubset<T, SessionAnalyticUpsertArgs<ExtArgs>>): Prisma__SessionAnalyticClient<$Result.GetResult<Prisma.$SessionAnalyticPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SessionAnalytics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticCountArgs} args - Arguments to filter SessionAnalytics to count.
     * @example
     * // Count the number of SessionAnalytics
     * const count = await prisma.sessionAnalytic.count({
     *   where: {
     *     // ... the filter for the SessionAnalytics we want to count
     *   }
     * })
    **/
    count<T extends SessionAnalyticCountArgs>(
      args?: Subset<T, SessionAnalyticCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionAnalyticCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionAnalytic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAnalyticAggregateArgs>(args: Subset<T, SessionAnalyticAggregateArgs>): Prisma.PrismaPromise<GetSessionAnalyticAggregateType<T>>

    /**
     * Group by SessionAnalytic.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAnalyticGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionAnalyticGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionAnalyticGroupByArgs['orderBy'] }
        : { orderBy?: SessionAnalyticGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionAnalyticGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionAnalyticGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionAnalytic model
   */
  readonly fields: SessionAnalyticFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionAnalytic.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionAnalyticClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ProctoringSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSessionDefaultArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionAnalytic model
   */ 
  interface SessionAnalyticFieldRefs {
    readonly id: FieldRef<"SessionAnalytic", 'String'>
    readonly sessionId: FieldRef<"SessionAnalytic", 'String'>
    readonly eventType: FieldRef<"SessionAnalytic", 'String'>
    readonly eventData: FieldRef<"SessionAnalytic", 'Json'>
    readonly mouseMovements: FieldRef<"SessionAnalytic", 'Int'>
    readonly keystrokeCount: FieldRef<"SessionAnalytic", 'Int'>
    readonly focusLossCount: FieldRef<"SessionAnalytic", 'Int'>
    readonly tabSwitches: FieldRef<"SessionAnalytic", 'Int'>
    readonly windowBlurCount: FieldRef<"SessionAnalytic", 'Int'>
    readonly recordedAt: FieldRef<"SessionAnalytic", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionAnalytic findUnique
   */
  export type SessionAnalyticFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * Filter, which SessionAnalytic to fetch.
     */
    where: SessionAnalyticWhereUniqueInput
  }

  /**
   * SessionAnalytic findUniqueOrThrow
   */
  export type SessionAnalyticFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * Filter, which SessionAnalytic to fetch.
     */
    where: SessionAnalyticWhereUniqueInput
  }

  /**
   * SessionAnalytic findFirst
   */
  export type SessionAnalyticFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * Filter, which SessionAnalytic to fetch.
     */
    where?: SessionAnalyticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionAnalytics to fetch.
     */
    orderBy?: SessionAnalyticOrderByWithRelationInput | SessionAnalyticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionAnalytics.
     */
    cursor?: SessionAnalyticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionAnalytics.
     */
    distinct?: SessionAnalyticScalarFieldEnum | SessionAnalyticScalarFieldEnum[]
  }

  /**
   * SessionAnalytic findFirstOrThrow
   */
  export type SessionAnalyticFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * Filter, which SessionAnalytic to fetch.
     */
    where?: SessionAnalyticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionAnalytics to fetch.
     */
    orderBy?: SessionAnalyticOrderByWithRelationInput | SessionAnalyticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionAnalytics.
     */
    cursor?: SessionAnalyticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionAnalytics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionAnalytics.
     */
    distinct?: SessionAnalyticScalarFieldEnum | SessionAnalyticScalarFieldEnum[]
  }

  /**
   * SessionAnalytic findMany
   */
  export type SessionAnalyticFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * Filter, which SessionAnalytics to fetch.
     */
    where?: SessionAnalyticWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionAnalytics to fetch.
     */
    orderBy?: SessionAnalyticOrderByWithRelationInput | SessionAnalyticOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionAnalytics.
     */
    cursor?: SessionAnalyticWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionAnalytics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionAnalytics.
     */
    skip?: number
    distinct?: SessionAnalyticScalarFieldEnum | SessionAnalyticScalarFieldEnum[]
  }

  /**
   * SessionAnalytic create
   */
  export type SessionAnalyticCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionAnalytic.
     */
    data: XOR<SessionAnalyticCreateInput, SessionAnalyticUncheckedCreateInput>
  }

  /**
   * SessionAnalytic createMany
   */
  export type SessionAnalyticCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionAnalytics.
     */
    data: SessionAnalyticCreateManyInput | SessionAnalyticCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionAnalytic createManyAndReturn
   */
  export type SessionAnalyticCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SessionAnalytics.
     */
    data: SessionAnalyticCreateManyInput | SessionAnalyticCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionAnalytic update
   */
  export type SessionAnalyticUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionAnalytic.
     */
    data: XOR<SessionAnalyticUpdateInput, SessionAnalyticUncheckedUpdateInput>
    /**
     * Choose, which SessionAnalytic to update.
     */
    where: SessionAnalyticWhereUniqueInput
  }

  /**
   * SessionAnalytic updateMany
   */
  export type SessionAnalyticUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionAnalytics.
     */
    data: XOR<SessionAnalyticUpdateManyMutationInput, SessionAnalyticUncheckedUpdateManyInput>
    /**
     * Filter which SessionAnalytics to update
     */
    where?: SessionAnalyticWhereInput
  }

  /**
   * SessionAnalytic upsert
   */
  export type SessionAnalyticUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionAnalytic to update in case it exists.
     */
    where: SessionAnalyticWhereUniqueInput
    /**
     * In case the SessionAnalytic found by the `where` argument doesn't exist, create a new SessionAnalytic with this data.
     */
    create: XOR<SessionAnalyticCreateInput, SessionAnalyticUncheckedCreateInput>
    /**
     * In case the SessionAnalytic was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionAnalyticUpdateInput, SessionAnalyticUncheckedUpdateInput>
  }

  /**
   * SessionAnalytic delete
   */
  export type SessionAnalyticDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
    /**
     * Filter which SessionAnalytic to delete.
     */
    where: SessionAnalyticWhereUniqueInput
  }

  /**
   * SessionAnalytic deleteMany
   */
  export type SessionAnalyticDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionAnalytics to delete
     */
    where?: SessionAnalyticWhereInput
  }

  /**
   * SessionAnalytic without action
   */
  export type SessionAnalyticDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionAnalytic
     */
    select?: SessionAnalyticSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionAnalyticInclude<ExtArgs> | null
  }


  /**
   * Model IdentityVerification
   */

  export type AggregateIdentityVerification = {
    _count: IdentityVerificationCountAggregateOutputType | null
    _avg: IdentityVerificationAvgAggregateOutputType | null
    _sum: IdentityVerificationSumAggregateOutputType | null
    _min: IdentityVerificationMinAggregateOutputType | null
    _max: IdentityVerificationMaxAggregateOutputType | null
  }

  export type IdentityVerificationAvgAggregateOutputType = {
    confidenceScore: number | null
  }

  export type IdentityVerificationSumAggregateOutputType = {
    confidenceScore: number | null
  }

  export type IdentityVerificationMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    verificationType: string | null
    referenceImageUrl: string | null
    verificationImageUrl: string | null
    confidenceScore: number | null
    verificationResult: string | null
    failureReason: string | null
    verifiedAt: Date | null
  }

  export type IdentityVerificationMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    verificationType: string | null
    referenceImageUrl: string | null
    verificationImageUrl: string | null
    confidenceScore: number | null
    verificationResult: string | null
    failureReason: string | null
    verifiedAt: Date | null
  }

  export type IdentityVerificationCountAggregateOutputType = {
    id: number
    sessionId: number
    verificationType: number
    referenceImageUrl: number
    verificationImageUrl: number
    confidenceScore: number
    verificationResult: number
    failureReason: number
    verifiedAt: number
    biometricData: number
    _all: number
  }


  export type IdentityVerificationAvgAggregateInputType = {
    confidenceScore?: true
  }

  export type IdentityVerificationSumAggregateInputType = {
    confidenceScore?: true
  }

  export type IdentityVerificationMinAggregateInputType = {
    id?: true
    sessionId?: true
    verificationType?: true
    referenceImageUrl?: true
    verificationImageUrl?: true
    confidenceScore?: true
    verificationResult?: true
    failureReason?: true
    verifiedAt?: true
  }

  export type IdentityVerificationMaxAggregateInputType = {
    id?: true
    sessionId?: true
    verificationType?: true
    referenceImageUrl?: true
    verificationImageUrl?: true
    confidenceScore?: true
    verificationResult?: true
    failureReason?: true
    verifiedAt?: true
  }

  export type IdentityVerificationCountAggregateInputType = {
    id?: true
    sessionId?: true
    verificationType?: true
    referenceImageUrl?: true
    verificationImageUrl?: true
    confidenceScore?: true
    verificationResult?: true
    failureReason?: true
    verifiedAt?: true
    biometricData?: true
    _all?: true
  }

  export type IdentityVerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IdentityVerification to aggregate.
     */
    where?: IdentityVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdentityVerifications to fetch.
     */
    orderBy?: IdentityVerificationOrderByWithRelationInput | IdentityVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IdentityVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdentityVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdentityVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IdentityVerifications
    **/
    _count?: true | IdentityVerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IdentityVerificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IdentityVerificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IdentityVerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IdentityVerificationMaxAggregateInputType
  }

  export type GetIdentityVerificationAggregateType<T extends IdentityVerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateIdentityVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIdentityVerification[P]>
      : GetScalarType<T[P], AggregateIdentityVerification[P]>
  }




  export type IdentityVerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IdentityVerificationWhereInput
    orderBy?: IdentityVerificationOrderByWithAggregationInput | IdentityVerificationOrderByWithAggregationInput[]
    by: IdentityVerificationScalarFieldEnum[] | IdentityVerificationScalarFieldEnum
    having?: IdentityVerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IdentityVerificationCountAggregateInputType | true
    _avg?: IdentityVerificationAvgAggregateInputType
    _sum?: IdentityVerificationSumAggregateInputType
    _min?: IdentityVerificationMinAggregateInputType
    _max?: IdentityVerificationMaxAggregateInputType
  }

  export type IdentityVerificationGroupByOutputType = {
    id: string
    sessionId: string
    verificationType: string
    referenceImageUrl: string | null
    verificationImageUrl: string | null
    confidenceScore: number | null
    verificationResult: string | null
    failureReason: string | null
    verifiedAt: Date
    biometricData: JsonValue | null
    _count: IdentityVerificationCountAggregateOutputType | null
    _avg: IdentityVerificationAvgAggregateOutputType | null
    _sum: IdentityVerificationSumAggregateOutputType | null
    _min: IdentityVerificationMinAggregateOutputType | null
    _max: IdentityVerificationMaxAggregateOutputType | null
  }

  type GetIdentityVerificationGroupByPayload<T extends IdentityVerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IdentityVerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IdentityVerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IdentityVerificationGroupByOutputType[P]>
            : GetScalarType<T[P], IdentityVerificationGroupByOutputType[P]>
        }
      >
    >


  export type IdentityVerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    verificationType?: boolean
    referenceImageUrl?: boolean
    verificationImageUrl?: boolean
    confidenceScore?: boolean
    verificationResult?: boolean
    failureReason?: boolean
    verifiedAt?: boolean
    biometricData?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["identityVerification"]>

  export type IdentityVerificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    verificationType?: boolean
    referenceImageUrl?: boolean
    verificationImageUrl?: boolean
    confidenceScore?: boolean
    verificationResult?: boolean
    failureReason?: boolean
    verifiedAt?: boolean
    biometricData?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["identityVerification"]>

  export type IdentityVerificationSelectScalar = {
    id?: boolean
    sessionId?: boolean
    verificationType?: boolean
    referenceImageUrl?: boolean
    verificationImageUrl?: boolean
    confidenceScore?: boolean
    verificationResult?: boolean
    failureReason?: boolean
    verifiedAt?: boolean
    biometricData?: boolean
  }

  export type IdentityVerificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }
  export type IdentityVerificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }

  export type $IdentityVerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IdentityVerification"
    objects: {
      session: Prisma.$ProctoringSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      verificationType: string
      referenceImageUrl: string | null
      verificationImageUrl: string | null
      confidenceScore: number | null
      verificationResult: string | null
      failureReason: string | null
      verifiedAt: Date
      biometricData: Prisma.JsonValue | null
    }, ExtArgs["result"]["identityVerification"]>
    composites: {}
  }

  type IdentityVerificationGetPayload<S extends boolean | null | undefined | IdentityVerificationDefaultArgs> = $Result.GetResult<Prisma.$IdentityVerificationPayload, S>

  type IdentityVerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IdentityVerificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IdentityVerificationCountAggregateInputType | true
    }

  export interface IdentityVerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IdentityVerification'], meta: { name: 'IdentityVerification' } }
    /**
     * Find zero or one IdentityVerification that matches the filter.
     * @param {IdentityVerificationFindUniqueArgs} args - Arguments to find a IdentityVerification
     * @example
     * // Get one IdentityVerification
     * const identityVerification = await prisma.identityVerification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IdentityVerificationFindUniqueArgs>(args: SelectSubset<T, IdentityVerificationFindUniqueArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one IdentityVerification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IdentityVerificationFindUniqueOrThrowArgs} args - Arguments to find a IdentityVerification
     * @example
     * // Get one IdentityVerification
     * const identityVerification = await prisma.identityVerification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IdentityVerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, IdentityVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first IdentityVerification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationFindFirstArgs} args - Arguments to find a IdentityVerification
     * @example
     * // Get one IdentityVerification
     * const identityVerification = await prisma.identityVerification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IdentityVerificationFindFirstArgs>(args?: SelectSubset<T, IdentityVerificationFindFirstArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first IdentityVerification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationFindFirstOrThrowArgs} args - Arguments to find a IdentityVerification
     * @example
     * // Get one IdentityVerification
     * const identityVerification = await prisma.identityVerification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IdentityVerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, IdentityVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more IdentityVerifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IdentityVerifications
     * const identityVerifications = await prisma.identityVerification.findMany()
     * 
     * // Get first 10 IdentityVerifications
     * const identityVerifications = await prisma.identityVerification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const identityVerificationWithIdOnly = await prisma.identityVerification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IdentityVerificationFindManyArgs>(args?: SelectSubset<T, IdentityVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a IdentityVerification.
     * @param {IdentityVerificationCreateArgs} args - Arguments to create a IdentityVerification.
     * @example
     * // Create one IdentityVerification
     * const IdentityVerification = await prisma.identityVerification.create({
     *   data: {
     *     // ... data to create a IdentityVerification
     *   }
     * })
     * 
     */
    create<T extends IdentityVerificationCreateArgs>(args: SelectSubset<T, IdentityVerificationCreateArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many IdentityVerifications.
     * @param {IdentityVerificationCreateManyArgs} args - Arguments to create many IdentityVerifications.
     * @example
     * // Create many IdentityVerifications
     * const identityVerification = await prisma.identityVerification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IdentityVerificationCreateManyArgs>(args?: SelectSubset<T, IdentityVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IdentityVerifications and returns the data saved in the database.
     * @param {IdentityVerificationCreateManyAndReturnArgs} args - Arguments to create many IdentityVerifications.
     * @example
     * // Create many IdentityVerifications
     * const identityVerification = await prisma.identityVerification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IdentityVerifications and only return the `id`
     * const identityVerificationWithIdOnly = await prisma.identityVerification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IdentityVerificationCreateManyAndReturnArgs>(args?: SelectSubset<T, IdentityVerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a IdentityVerification.
     * @param {IdentityVerificationDeleteArgs} args - Arguments to delete one IdentityVerification.
     * @example
     * // Delete one IdentityVerification
     * const IdentityVerification = await prisma.identityVerification.delete({
     *   where: {
     *     // ... filter to delete one IdentityVerification
     *   }
     * })
     * 
     */
    delete<T extends IdentityVerificationDeleteArgs>(args: SelectSubset<T, IdentityVerificationDeleteArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one IdentityVerification.
     * @param {IdentityVerificationUpdateArgs} args - Arguments to update one IdentityVerification.
     * @example
     * // Update one IdentityVerification
     * const identityVerification = await prisma.identityVerification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IdentityVerificationUpdateArgs>(args: SelectSubset<T, IdentityVerificationUpdateArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more IdentityVerifications.
     * @param {IdentityVerificationDeleteManyArgs} args - Arguments to filter IdentityVerifications to delete.
     * @example
     * // Delete a few IdentityVerifications
     * const { count } = await prisma.identityVerification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IdentityVerificationDeleteManyArgs>(args?: SelectSubset<T, IdentityVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IdentityVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IdentityVerifications
     * const identityVerification = await prisma.identityVerification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IdentityVerificationUpdateManyArgs>(args: SelectSubset<T, IdentityVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one IdentityVerification.
     * @param {IdentityVerificationUpsertArgs} args - Arguments to update or create a IdentityVerification.
     * @example
     * // Update or create a IdentityVerification
     * const identityVerification = await prisma.identityVerification.upsert({
     *   create: {
     *     // ... data to create a IdentityVerification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IdentityVerification we want to update
     *   }
     * })
     */
    upsert<T extends IdentityVerificationUpsertArgs>(args: SelectSubset<T, IdentityVerificationUpsertArgs<ExtArgs>>): Prisma__IdentityVerificationClient<$Result.GetResult<Prisma.$IdentityVerificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of IdentityVerifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationCountArgs} args - Arguments to filter IdentityVerifications to count.
     * @example
     * // Count the number of IdentityVerifications
     * const count = await prisma.identityVerification.count({
     *   where: {
     *     // ... the filter for the IdentityVerifications we want to count
     *   }
     * })
    **/
    count<T extends IdentityVerificationCountArgs>(
      args?: Subset<T, IdentityVerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IdentityVerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IdentityVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IdentityVerificationAggregateArgs>(args: Subset<T, IdentityVerificationAggregateArgs>): Prisma.PrismaPromise<GetIdentityVerificationAggregateType<T>>

    /**
     * Group by IdentityVerification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IdentityVerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IdentityVerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IdentityVerificationGroupByArgs['orderBy'] }
        : { orderBy?: IdentityVerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IdentityVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIdentityVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IdentityVerification model
   */
  readonly fields: IdentityVerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IdentityVerification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IdentityVerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ProctoringSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSessionDefaultArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IdentityVerification model
   */ 
  interface IdentityVerificationFieldRefs {
    readonly id: FieldRef<"IdentityVerification", 'String'>
    readonly sessionId: FieldRef<"IdentityVerification", 'String'>
    readonly verificationType: FieldRef<"IdentityVerification", 'String'>
    readonly referenceImageUrl: FieldRef<"IdentityVerification", 'String'>
    readonly verificationImageUrl: FieldRef<"IdentityVerification", 'String'>
    readonly confidenceScore: FieldRef<"IdentityVerification", 'Float'>
    readonly verificationResult: FieldRef<"IdentityVerification", 'String'>
    readonly failureReason: FieldRef<"IdentityVerification", 'String'>
    readonly verifiedAt: FieldRef<"IdentityVerification", 'DateTime'>
    readonly biometricData: FieldRef<"IdentityVerification", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * IdentityVerification findUnique
   */
  export type IdentityVerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * Filter, which IdentityVerification to fetch.
     */
    where: IdentityVerificationWhereUniqueInput
  }

  /**
   * IdentityVerification findUniqueOrThrow
   */
  export type IdentityVerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * Filter, which IdentityVerification to fetch.
     */
    where: IdentityVerificationWhereUniqueInput
  }

  /**
   * IdentityVerification findFirst
   */
  export type IdentityVerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * Filter, which IdentityVerification to fetch.
     */
    where?: IdentityVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdentityVerifications to fetch.
     */
    orderBy?: IdentityVerificationOrderByWithRelationInput | IdentityVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IdentityVerifications.
     */
    cursor?: IdentityVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdentityVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdentityVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IdentityVerifications.
     */
    distinct?: IdentityVerificationScalarFieldEnum | IdentityVerificationScalarFieldEnum[]
  }

  /**
   * IdentityVerification findFirstOrThrow
   */
  export type IdentityVerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * Filter, which IdentityVerification to fetch.
     */
    where?: IdentityVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdentityVerifications to fetch.
     */
    orderBy?: IdentityVerificationOrderByWithRelationInput | IdentityVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IdentityVerifications.
     */
    cursor?: IdentityVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdentityVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdentityVerifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IdentityVerifications.
     */
    distinct?: IdentityVerificationScalarFieldEnum | IdentityVerificationScalarFieldEnum[]
  }

  /**
   * IdentityVerification findMany
   */
  export type IdentityVerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * Filter, which IdentityVerifications to fetch.
     */
    where?: IdentityVerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IdentityVerifications to fetch.
     */
    orderBy?: IdentityVerificationOrderByWithRelationInput | IdentityVerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IdentityVerifications.
     */
    cursor?: IdentityVerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IdentityVerifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IdentityVerifications.
     */
    skip?: number
    distinct?: IdentityVerificationScalarFieldEnum | IdentityVerificationScalarFieldEnum[]
  }

  /**
   * IdentityVerification create
   */
  export type IdentityVerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a IdentityVerification.
     */
    data: XOR<IdentityVerificationCreateInput, IdentityVerificationUncheckedCreateInput>
  }

  /**
   * IdentityVerification createMany
   */
  export type IdentityVerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IdentityVerifications.
     */
    data: IdentityVerificationCreateManyInput | IdentityVerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IdentityVerification createManyAndReturn
   */
  export type IdentityVerificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many IdentityVerifications.
     */
    data: IdentityVerificationCreateManyInput | IdentityVerificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IdentityVerification update
   */
  export type IdentityVerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a IdentityVerification.
     */
    data: XOR<IdentityVerificationUpdateInput, IdentityVerificationUncheckedUpdateInput>
    /**
     * Choose, which IdentityVerification to update.
     */
    where: IdentityVerificationWhereUniqueInput
  }

  /**
   * IdentityVerification updateMany
   */
  export type IdentityVerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IdentityVerifications.
     */
    data: XOR<IdentityVerificationUpdateManyMutationInput, IdentityVerificationUncheckedUpdateManyInput>
    /**
     * Filter which IdentityVerifications to update
     */
    where?: IdentityVerificationWhereInput
  }

  /**
   * IdentityVerification upsert
   */
  export type IdentityVerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the IdentityVerification to update in case it exists.
     */
    where: IdentityVerificationWhereUniqueInput
    /**
     * In case the IdentityVerification found by the `where` argument doesn't exist, create a new IdentityVerification with this data.
     */
    create: XOR<IdentityVerificationCreateInput, IdentityVerificationUncheckedCreateInput>
    /**
     * In case the IdentityVerification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IdentityVerificationUpdateInput, IdentityVerificationUncheckedUpdateInput>
  }

  /**
   * IdentityVerification delete
   */
  export type IdentityVerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
    /**
     * Filter which IdentityVerification to delete.
     */
    where: IdentityVerificationWhereUniqueInput
  }

  /**
   * IdentityVerification deleteMany
   */
  export type IdentityVerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IdentityVerifications to delete
     */
    where?: IdentityVerificationWhereInput
  }

  /**
   * IdentityVerification without action
   */
  export type IdentityVerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IdentityVerification
     */
    select?: IdentityVerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IdentityVerificationInclude<ExtArgs> | null
  }


  /**
   * Model PlagiarismReport
   */

  export type AggregatePlagiarismReport = {
    _count: PlagiarismReportCountAggregateOutputType | null
    _avg: PlagiarismReportAvgAggregateOutputType | null
    _sum: PlagiarismReportSumAggregateOutputType | null
    _min: PlagiarismReportMinAggregateOutputType | null
    _max: PlagiarismReportMaxAggregateOutputType | null
  }

  export type PlagiarismReportAvgAggregateOutputType = {
    similarityScore: number | null
    matchesFound: number | null
  }

  export type PlagiarismReportSumAggregateOutputType = {
    similarityScore: number | null
    matchesFound: number | null
  }

  export type PlagiarismReportMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    submissionId: string | null
    language: string | null
    similarityScore: number | null
    matchesFound: number | null
    reportUrl: string | null
    generatedAt: Date | null
    status: string | null
  }

  export type PlagiarismReportMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    submissionId: string | null
    language: string | null
    similarityScore: number | null
    matchesFound: number | null
    reportUrl: string | null
    generatedAt: Date | null
    status: string | null
  }

  export type PlagiarismReportCountAggregateOutputType = {
    id: number
    sessionId: number
    submissionId: number
    language: number
    similarityScore: number
    matchesFound: number
    reportUrl: number
    reportData: number
    generatedAt: number
    status: number
    _all: number
  }


  export type PlagiarismReportAvgAggregateInputType = {
    similarityScore?: true
    matchesFound?: true
  }

  export type PlagiarismReportSumAggregateInputType = {
    similarityScore?: true
    matchesFound?: true
  }

  export type PlagiarismReportMinAggregateInputType = {
    id?: true
    sessionId?: true
    submissionId?: true
    language?: true
    similarityScore?: true
    matchesFound?: true
    reportUrl?: true
    generatedAt?: true
    status?: true
  }

  export type PlagiarismReportMaxAggregateInputType = {
    id?: true
    sessionId?: true
    submissionId?: true
    language?: true
    similarityScore?: true
    matchesFound?: true
    reportUrl?: true
    generatedAt?: true
    status?: true
  }

  export type PlagiarismReportCountAggregateInputType = {
    id?: true
    sessionId?: true
    submissionId?: true
    language?: true
    similarityScore?: true
    matchesFound?: true
    reportUrl?: true
    reportData?: true
    generatedAt?: true
    status?: true
    _all?: true
  }

  export type PlagiarismReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlagiarismReport to aggregate.
     */
    where?: PlagiarismReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlagiarismReports to fetch.
     */
    orderBy?: PlagiarismReportOrderByWithRelationInput | PlagiarismReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlagiarismReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlagiarismReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlagiarismReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlagiarismReports
    **/
    _count?: true | PlagiarismReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlagiarismReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlagiarismReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlagiarismReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlagiarismReportMaxAggregateInputType
  }

  export type GetPlagiarismReportAggregateType<T extends PlagiarismReportAggregateArgs> = {
        [P in keyof T & keyof AggregatePlagiarismReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlagiarismReport[P]>
      : GetScalarType<T[P], AggregatePlagiarismReport[P]>
  }




  export type PlagiarismReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlagiarismReportWhereInput
    orderBy?: PlagiarismReportOrderByWithAggregationInput | PlagiarismReportOrderByWithAggregationInput[]
    by: PlagiarismReportScalarFieldEnum[] | PlagiarismReportScalarFieldEnum
    having?: PlagiarismReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlagiarismReportCountAggregateInputType | true
    _avg?: PlagiarismReportAvgAggregateInputType
    _sum?: PlagiarismReportSumAggregateInputType
    _min?: PlagiarismReportMinAggregateInputType
    _max?: PlagiarismReportMaxAggregateInputType
  }

  export type PlagiarismReportGroupByOutputType = {
    id: string
    sessionId: string
    submissionId: string | null
    language: string | null
    similarityScore: number | null
    matchesFound: number
    reportUrl: string | null
    reportData: JsonValue | null
    generatedAt: Date
    status: string
    _count: PlagiarismReportCountAggregateOutputType | null
    _avg: PlagiarismReportAvgAggregateOutputType | null
    _sum: PlagiarismReportSumAggregateOutputType | null
    _min: PlagiarismReportMinAggregateOutputType | null
    _max: PlagiarismReportMaxAggregateOutputType | null
  }

  type GetPlagiarismReportGroupByPayload<T extends PlagiarismReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlagiarismReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlagiarismReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlagiarismReportGroupByOutputType[P]>
            : GetScalarType<T[P], PlagiarismReportGroupByOutputType[P]>
        }
      >
    >


  export type PlagiarismReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    submissionId?: boolean
    language?: boolean
    similarityScore?: boolean
    matchesFound?: boolean
    reportUrl?: boolean
    reportData?: boolean
    generatedAt?: boolean
    status?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plagiarismReport"]>

  export type PlagiarismReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    submissionId?: boolean
    language?: boolean
    similarityScore?: boolean
    matchesFound?: boolean
    reportUrl?: boolean
    reportData?: boolean
    generatedAt?: boolean
    status?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plagiarismReport"]>

  export type PlagiarismReportSelectScalar = {
    id?: boolean
    sessionId?: boolean
    submissionId?: boolean
    language?: boolean
    similarityScore?: boolean
    matchesFound?: boolean
    reportUrl?: boolean
    reportData?: boolean
    generatedAt?: boolean
    status?: boolean
  }

  export type PlagiarismReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }
  export type PlagiarismReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }

  export type $PlagiarismReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlagiarismReport"
    objects: {
      session: Prisma.$ProctoringSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      submissionId: string | null
      language: string | null
      similarityScore: number | null
      matchesFound: number
      reportUrl: string | null
      reportData: Prisma.JsonValue | null
      generatedAt: Date
      status: string
    }, ExtArgs["result"]["plagiarismReport"]>
    composites: {}
  }

  type PlagiarismReportGetPayload<S extends boolean | null | undefined | PlagiarismReportDefaultArgs> = $Result.GetResult<Prisma.$PlagiarismReportPayload, S>

  type PlagiarismReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlagiarismReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlagiarismReportCountAggregateInputType | true
    }

  export interface PlagiarismReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlagiarismReport'], meta: { name: 'PlagiarismReport' } }
    /**
     * Find zero or one PlagiarismReport that matches the filter.
     * @param {PlagiarismReportFindUniqueArgs} args - Arguments to find a PlagiarismReport
     * @example
     * // Get one PlagiarismReport
     * const plagiarismReport = await prisma.plagiarismReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlagiarismReportFindUniqueArgs>(args: SelectSubset<T, PlagiarismReportFindUniqueArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlagiarismReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlagiarismReportFindUniqueOrThrowArgs} args - Arguments to find a PlagiarismReport
     * @example
     * // Get one PlagiarismReport
     * const plagiarismReport = await prisma.plagiarismReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlagiarismReportFindUniqueOrThrowArgs>(args: SelectSubset<T, PlagiarismReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlagiarismReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportFindFirstArgs} args - Arguments to find a PlagiarismReport
     * @example
     * // Get one PlagiarismReport
     * const plagiarismReport = await prisma.plagiarismReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlagiarismReportFindFirstArgs>(args?: SelectSubset<T, PlagiarismReportFindFirstArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlagiarismReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportFindFirstOrThrowArgs} args - Arguments to find a PlagiarismReport
     * @example
     * // Get one PlagiarismReport
     * const plagiarismReport = await prisma.plagiarismReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlagiarismReportFindFirstOrThrowArgs>(args?: SelectSubset<T, PlagiarismReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlagiarismReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlagiarismReports
     * const plagiarismReports = await prisma.plagiarismReport.findMany()
     * 
     * // Get first 10 PlagiarismReports
     * const plagiarismReports = await prisma.plagiarismReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plagiarismReportWithIdOnly = await prisma.plagiarismReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlagiarismReportFindManyArgs>(args?: SelectSubset<T, PlagiarismReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlagiarismReport.
     * @param {PlagiarismReportCreateArgs} args - Arguments to create a PlagiarismReport.
     * @example
     * // Create one PlagiarismReport
     * const PlagiarismReport = await prisma.plagiarismReport.create({
     *   data: {
     *     // ... data to create a PlagiarismReport
     *   }
     * })
     * 
     */
    create<T extends PlagiarismReportCreateArgs>(args: SelectSubset<T, PlagiarismReportCreateArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlagiarismReports.
     * @param {PlagiarismReportCreateManyArgs} args - Arguments to create many PlagiarismReports.
     * @example
     * // Create many PlagiarismReports
     * const plagiarismReport = await prisma.plagiarismReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlagiarismReportCreateManyArgs>(args?: SelectSubset<T, PlagiarismReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlagiarismReports and returns the data saved in the database.
     * @param {PlagiarismReportCreateManyAndReturnArgs} args - Arguments to create many PlagiarismReports.
     * @example
     * // Create many PlagiarismReports
     * const plagiarismReport = await prisma.plagiarismReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlagiarismReports and only return the `id`
     * const plagiarismReportWithIdOnly = await prisma.plagiarismReport.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlagiarismReportCreateManyAndReturnArgs>(args?: SelectSubset<T, PlagiarismReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PlagiarismReport.
     * @param {PlagiarismReportDeleteArgs} args - Arguments to delete one PlagiarismReport.
     * @example
     * // Delete one PlagiarismReport
     * const PlagiarismReport = await prisma.plagiarismReport.delete({
     *   where: {
     *     // ... filter to delete one PlagiarismReport
     *   }
     * })
     * 
     */
    delete<T extends PlagiarismReportDeleteArgs>(args: SelectSubset<T, PlagiarismReportDeleteArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlagiarismReport.
     * @param {PlagiarismReportUpdateArgs} args - Arguments to update one PlagiarismReport.
     * @example
     * // Update one PlagiarismReport
     * const plagiarismReport = await prisma.plagiarismReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlagiarismReportUpdateArgs>(args: SelectSubset<T, PlagiarismReportUpdateArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlagiarismReports.
     * @param {PlagiarismReportDeleteManyArgs} args - Arguments to filter PlagiarismReports to delete.
     * @example
     * // Delete a few PlagiarismReports
     * const { count } = await prisma.plagiarismReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlagiarismReportDeleteManyArgs>(args?: SelectSubset<T, PlagiarismReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlagiarismReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlagiarismReports
     * const plagiarismReport = await prisma.plagiarismReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlagiarismReportUpdateManyArgs>(args: SelectSubset<T, PlagiarismReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlagiarismReport.
     * @param {PlagiarismReportUpsertArgs} args - Arguments to update or create a PlagiarismReport.
     * @example
     * // Update or create a PlagiarismReport
     * const plagiarismReport = await prisma.plagiarismReport.upsert({
     *   create: {
     *     // ... data to create a PlagiarismReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlagiarismReport we want to update
     *   }
     * })
     */
    upsert<T extends PlagiarismReportUpsertArgs>(args: SelectSubset<T, PlagiarismReportUpsertArgs<ExtArgs>>): Prisma__PlagiarismReportClient<$Result.GetResult<Prisma.$PlagiarismReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlagiarismReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportCountArgs} args - Arguments to filter PlagiarismReports to count.
     * @example
     * // Count the number of PlagiarismReports
     * const count = await prisma.plagiarismReport.count({
     *   where: {
     *     // ... the filter for the PlagiarismReports we want to count
     *   }
     * })
    **/
    count<T extends PlagiarismReportCountArgs>(
      args?: Subset<T, PlagiarismReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlagiarismReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlagiarismReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlagiarismReportAggregateArgs>(args: Subset<T, PlagiarismReportAggregateArgs>): Prisma.PrismaPromise<GetPlagiarismReportAggregateType<T>>

    /**
     * Group by PlagiarismReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlagiarismReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlagiarismReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlagiarismReportGroupByArgs['orderBy'] }
        : { orderBy?: PlagiarismReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlagiarismReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlagiarismReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlagiarismReport model
   */
  readonly fields: PlagiarismReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlagiarismReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlagiarismReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ProctoringSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSessionDefaultArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlagiarismReport model
   */ 
  interface PlagiarismReportFieldRefs {
    readonly id: FieldRef<"PlagiarismReport", 'String'>
    readonly sessionId: FieldRef<"PlagiarismReport", 'String'>
    readonly submissionId: FieldRef<"PlagiarismReport", 'String'>
    readonly language: FieldRef<"PlagiarismReport", 'String'>
    readonly similarityScore: FieldRef<"PlagiarismReport", 'Float'>
    readonly matchesFound: FieldRef<"PlagiarismReport", 'Int'>
    readonly reportUrl: FieldRef<"PlagiarismReport", 'String'>
    readonly reportData: FieldRef<"PlagiarismReport", 'Json'>
    readonly generatedAt: FieldRef<"PlagiarismReport", 'DateTime'>
    readonly status: FieldRef<"PlagiarismReport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PlagiarismReport findUnique
   */
  export type PlagiarismReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * Filter, which PlagiarismReport to fetch.
     */
    where: PlagiarismReportWhereUniqueInput
  }

  /**
   * PlagiarismReport findUniqueOrThrow
   */
  export type PlagiarismReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * Filter, which PlagiarismReport to fetch.
     */
    where: PlagiarismReportWhereUniqueInput
  }

  /**
   * PlagiarismReport findFirst
   */
  export type PlagiarismReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * Filter, which PlagiarismReport to fetch.
     */
    where?: PlagiarismReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlagiarismReports to fetch.
     */
    orderBy?: PlagiarismReportOrderByWithRelationInput | PlagiarismReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlagiarismReports.
     */
    cursor?: PlagiarismReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlagiarismReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlagiarismReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlagiarismReports.
     */
    distinct?: PlagiarismReportScalarFieldEnum | PlagiarismReportScalarFieldEnum[]
  }

  /**
   * PlagiarismReport findFirstOrThrow
   */
  export type PlagiarismReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * Filter, which PlagiarismReport to fetch.
     */
    where?: PlagiarismReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlagiarismReports to fetch.
     */
    orderBy?: PlagiarismReportOrderByWithRelationInput | PlagiarismReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlagiarismReports.
     */
    cursor?: PlagiarismReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlagiarismReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlagiarismReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlagiarismReports.
     */
    distinct?: PlagiarismReportScalarFieldEnum | PlagiarismReportScalarFieldEnum[]
  }

  /**
   * PlagiarismReport findMany
   */
  export type PlagiarismReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * Filter, which PlagiarismReports to fetch.
     */
    where?: PlagiarismReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlagiarismReports to fetch.
     */
    orderBy?: PlagiarismReportOrderByWithRelationInput | PlagiarismReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlagiarismReports.
     */
    cursor?: PlagiarismReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlagiarismReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlagiarismReports.
     */
    skip?: number
    distinct?: PlagiarismReportScalarFieldEnum | PlagiarismReportScalarFieldEnum[]
  }

  /**
   * PlagiarismReport create
   */
  export type PlagiarismReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * The data needed to create a PlagiarismReport.
     */
    data: XOR<PlagiarismReportCreateInput, PlagiarismReportUncheckedCreateInput>
  }

  /**
   * PlagiarismReport createMany
   */
  export type PlagiarismReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlagiarismReports.
     */
    data: PlagiarismReportCreateManyInput | PlagiarismReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlagiarismReport createManyAndReturn
   */
  export type PlagiarismReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PlagiarismReports.
     */
    data: PlagiarismReportCreateManyInput | PlagiarismReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlagiarismReport update
   */
  export type PlagiarismReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * The data needed to update a PlagiarismReport.
     */
    data: XOR<PlagiarismReportUpdateInput, PlagiarismReportUncheckedUpdateInput>
    /**
     * Choose, which PlagiarismReport to update.
     */
    where: PlagiarismReportWhereUniqueInput
  }

  /**
   * PlagiarismReport updateMany
   */
  export type PlagiarismReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlagiarismReports.
     */
    data: XOR<PlagiarismReportUpdateManyMutationInput, PlagiarismReportUncheckedUpdateManyInput>
    /**
     * Filter which PlagiarismReports to update
     */
    where?: PlagiarismReportWhereInput
  }

  /**
   * PlagiarismReport upsert
   */
  export type PlagiarismReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * The filter to search for the PlagiarismReport to update in case it exists.
     */
    where: PlagiarismReportWhereUniqueInput
    /**
     * In case the PlagiarismReport found by the `where` argument doesn't exist, create a new PlagiarismReport with this data.
     */
    create: XOR<PlagiarismReportCreateInput, PlagiarismReportUncheckedCreateInput>
    /**
     * In case the PlagiarismReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlagiarismReportUpdateInput, PlagiarismReportUncheckedUpdateInput>
  }

  /**
   * PlagiarismReport delete
   */
  export type PlagiarismReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
    /**
     * Filter which PlagiarismReport to delete.
     */
    where: PlagiarismReportWhereUniqueInput
  }

  /**
   * PlagiarismReport deleteMany
   */
  export type PlagiarismReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlagiarismReports to delete
     */
    where?: PlagiarismReportWhereInput
  }

  /**
   * PlagiarismReport without action
   */
  export type PlagiarismReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlagiarismReport
     */
    select?: PlagiarismReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlagiarismReportInclude<ExtArgs> | null
  }


  /**
   * Model AdminIntervention
   */

  export type AggregateAdminIntervention = {
    _count: AdminInterventionCountAggregateOutputType | null
    _avg: AdminInterventionAvgAggregateOutputType | null
    _sum: AdminInterventionSumAggregateOutputType | null
    _min: AdminInterventionMinAggregateOutputType | null
    _max: AdminInterventionMaxAggregateOutputType | null
  }

  export type AdminInterventionAvgAggregateOutputType = {
    adminId: number | null
  }

  export type AdminInterventionSumAggregateOutputType = {
    adminId: bigint | null
  }

  export type AdminInterventionMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    adminId: bigint | null
    interventionType: string | null
    message: string | null
    actionTaken: string | null
    createdAt: Date | null
    resolved: boolean | null
    resolutionNotes: string | null
  }

  export type AdminInterventionMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    adminId: bigint | null
    interventionType: string | null
    message: string | null
    actionTaken: string | null
    createdAt: Date | null
    resolved: boolean | null
    resolutionNotes: string | null
  }

  export type AdminInterventionCountAggregateOutputType = {
    id: number
    sessionId: number
    adminId: number
    interventionType: number
    message: number
    actionTaken: number
    createdAt: number
    resolved: number
    resolutionNotes: number
    _all: number
  }


  export type AdminInterventionAvgAggregateInputType = {
    adminId?: true
  }

  export type AdminInterventionSumAggregateInputType = {
    adminId?: true
  }

  export type AdminInterventionMinAggregateInputType = {
    id?: true
    sessionId?: true
    adminId?: true
    interventionType?: true
    message?: true
    actionTaken?: true
    createdAt?: true
    resolved?: true
    resolutionNotes?: true
  }

  export type AdminInterventionMaxAggregateInputType = {
    id?: true
    sessionId?: true
    adminId?: true
    interventionType?: true
    message?: true
    actionTaken?: true
    createdAt?: true
    resolved?: true
    resolutionNotes?: true
  }

  export type AdminInterventionCountAggregateInputType = {
    id?: true
    sessionId?: true
    adminId?: true
    interventionType?: true
    message?: true
    actionTaken?: true
    createdAt?: true
    resolved?: true
    resolutionNotes?: true
    _all?: true
  }

  export type AdminInterventionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminIntervention to aggregate.
     */
    where?: AdminInterventionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminInterventions to fetch.
     */
    orderBy?: AdminInterventionOrderByWithRelationInput | AdminInterventionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminInterventionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminInterventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminInterventions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdminInterventions
    **/
    _count?: true | AdminInterventionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminInterventionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminInterventionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminInterventionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminInterventionMaxAggregateInputType
  }

  export type GetAdminInterventionAggregateType<T extends AdminInterventionAggregateArgs> = {
        [P in keyof T & keyof AggregateAdminIntervention]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdminIntervention[P]>
      : GetScalarType<T[P], AggregateAdminIntervention[P]>
  }




  export type AdminInterventionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminInterventionWhereInput
    orderBy?: AdminInterventionOrderByWithAggregationInput | AdminInterventionOrderByWithAggregationInput[]
    by: AdminInterventionScalarFieldEnum[] | AdminInterventionScalarFieldEnum
    having?: AdminInterventionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminInterventionCountAggregateInputType | true
    _avg?: AdminInterventionAvgAggregateInputType
    _sum?: AdminInterventionSumAggregateInputType
    _min?: AdminInterventionMinAggregateInputType
    _max?: AdminInterventionMaxAggregateInputType
  }

  export type AdminInterventionGroupByOutputType = {
    id: string
    sessionId: string
    adminId: bigint
    interventionType: string
    message: string | null
    actionTaken: string | null
    createdAt: Date
    resolved: boolean
    resolutionNotes: string | null
    _count: AdminInterventionCountAggregateOutputType | null
    _avg: AdminInterventionAvgAggregateOutputType | null
    _sum: AdminInterventionSumAggregateOutputType | null
    _min: AdminInterventionMinAggregateOutputType | null
    _max: AdminInterventionMaxAggregateOutputType | null
  }

  type GetAdminInterventionGroupByPayload<T extends AdminInterventionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminInterventionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminInterventionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminInterventionGroupByOutputType[P]>
            : GetScalarType<T[P], AdminInterventionGroupByOutputType[P]>
        }
      >
    >


  export type AdminInterventionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    adminId?: boolean
    interventionType?: boolean
    message?: boolean
    actionTaken?: boolean
    createdAt?: boolean
    resolved?: boolean
    resolutionNotes?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminIntervention"]>

  export type AdminInterventionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    adminId?: boolean
    interventionType?: boolean
    message?: boolean
    actionTaken?: boolean
    createdAt?: boolean
    resolved?: boolean
    resolutionNotes?: boolean
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adminIntervention"]>

  export type AdminInterventionSelectScalar = {
    id?: boolean
    sessionId?: boolean
    adminId?: boolean
    interventionType?: boolean
    message?: boolean
    actionTaken?: boolean
    createdAt?: boolean
    resolved?: boolean
    resolutionNotes?: boolean
  }

  export type AdminInterventionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }
  export type AdminInterventionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ProctoringSessionDefaultArgs<ExtArgs>
  }

  export type $AdminInterventionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdminIntervention"
    objects: {
      session: Prisma.$ProctoringSessionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      adminId: bigint
      interventionType: string
      message: string | null
      actionTaken: string | null
      createdAt: Date
      resolved: boolean
      resolutionNotes: string | null
    }, ExtArgs["result"]["adminIntervention"]>
    composites: {}
  }

  type AdminInterventionGetPayload<S extends boolean | null | undefined | AdminInterventionDefaultArgs> = $Result.GetResult<Prisma.$AdminInterventionPayload, S>

  type AdminInterventionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminInterventionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminInterventionCountAggregateInputType | true
    }

  export interface AdminInterventionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdminIntervention'], meta: { name: 'AdminIntervention' } }
    /**
     * Find zero or one AdminIntervention that matches the filter.
     * @param {AdminInterventionFindUniqueArgs} args - Arguments to find a AdminIntervention
     * @example
     * // Get one AdminIntervention
     * const adminIntervention = await prisma.adminIntervention.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminInterventionFindUniqueArgs>(args: SelectSubset<T, AdminInterventionFindUniqueArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdminIntervention that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminInterventionFindUniqueOrThrowArgs} args - Arguments to find a AdminIntervention
     * @example
     * // Get one AdminIntervention
     * const adminIntervention = await prisma.adminIntervention.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminInterventionFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminInterventionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdminIntervention that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionFindFirstArgs} args - Arguments to find a AdminIntervention
     * @example
     * // Get one AdminIntervention
     * const adminIntervention = await prisma.adminIntervention.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminInterventionFindFirstArgs>(args?: SelectSubset<T, AdminInterventionFindFirstArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdminIntervention that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionFindFirstOrThrowArgs} args - Arguments to find a AdminIntervention
     * @example
     * // Get one AdminIntervention
     * const adminIntervention = await prisma.adminIntervention.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminInterventionFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminInterventionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdminInterventions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdminInterventions
     * const adminInterventions = await prisma.adminIntervention.findMany()
     * 
     * // Get first 10 AdminInterventions
     * const adminInterventions = await prisma.adminIntervention.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminInterventionWithIdOnly = await prisma.adminIntervention.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminInterventionFindManyArgs>(args?: SelectSubset<T, AdminInterventionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdminIntervention.
     * @param {AdminInterventionCreateArgs} args - Arguments to create a AdminIntervention.
     * @example
     * // Create one AdminIntervention
     * const AdminIntervention = await prisma.adminIntervention.create({
     *   data: {
     *     // ... data to create a AdminIntervention
     *   }
     * })
     * 
     */
    create<T extends AdminInterventionCreateArgs>(args: SelectSubset<T, AdminInterventionCreateArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdminInterventions.
     * @param {AdminInterventionCreateManyArgs} args - Arguments to create many AdminInterventions.
     * @example
     * // Create many AdminInterventions
     * const adminIntervention = await prisma.adminIntervention.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminInterventionCreateManyArgs>(args?: SelectSubset<T, AdminInterventionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdminInterventions and returns the data saved in the database.
     * @param {AdminInterventionCreateManyAndReturnArgs} args - Arguments to create many AdminInterventions.
     * @example
     * // Create many AdminInterventions
     * const adminIntervention = await prisma.adminIntervention.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdminInterventions and only return the `id`
     * const adminInterventionWithIdOnly = await prisma.adminIntervention.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminInterventionCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminInterventionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdminIntervention.
     * @param {AdminInterventionDeleteArgs} args - Arguments to delete one AdminIntervention.
     * @example
     * // Delete one AdminIntervention
     * const AdminIntervention = await prisma.adminIntervention.delete({
     *   where: {
     *     // ... filter to delete one AdminIntervention
     *   }
     * })
     * 
     */
    delete<T extends AdminInterventionDeleteArgs>(args: SelectSubset<T, AdminInterventionDeleteArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdminIntervention.
     * @param {AdminInterventionUpdateArgs} args - Arguments to update one AdminIntervention.
     * @example
     * // Update one AdminIntervention
     * const adminIntervention = await prisma.adminIntervention.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminInterventionUpdateArgs>(args: SelectSubset<T, AdminInterventionUpdateArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdminInterventions.
     * @param {AdminInterventionDeleteManyArgs} args - Arguments to filter AdminInterventions to delete.
     * @example
     * // Delete a few AdminInterventions
     * const { count } = await prisma.adminIntervention.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminInterventionDeleteManyArgs>(args?: SelectSubset<T, AdminInterventionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdminInterventions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdminInterventions
     * const adminIntervention = await prisma.adminIntervention.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminInterventionUpdateManyArgs>(args: SelectSubset<T, AdminInterventionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdminIntervention.
     * @param {AdminInterventionUpsertArgs} args - Arguments to update or create a AdminIntervention.
     * @example
     * // Update or create a AdminIntervention
     * const adminIntervention = await prisma.adminIntervention.upsert({
     *   create: {
     *     // ... data to create a AdminIntervention
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdminIntervention we want to update
     *   }
     * })
     */
    upsert<T extends AdminInterventionUpsertArgs>(args: SelectSubset<T, AdminInterventionUpsertArgs<ExtArgs>>): Prisma__AdminInterventionClient<$Result.GetResult<Prisma.$AdminInterventionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdminInterventions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionCountArgs} args - Arguments to filter AdminInterventions to count.
     * @example
     * // Count the number of AdminInterventions
     * const count = await prisma.adminIntervention.count({
     *   where: {
     *     // ... the filter for the AdminInterventions we want to count
     *   }
     * })
    **/
    count<T extends AdminInterventionCountArgs>(
      args?: Subset<T, AdminInterventionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminInterventionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdminIntervention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminInterventionAggregateArgs>(args: Subset<T, AdminInterventionAggregateArgs>): Prisma.PrismaPromise<GetAdminInterventionAggregateType<T>>

    /**
     * Group by AdminIntervention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminInterventionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminInterventionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminInterventionGroupByArgs['orderBy'] }
        : { orderBy?: AdminInterventionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminInterventionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminInterventionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdminIntervention model
   */
  readonly fields: AdminInterventionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdminIntervention.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminInterventionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ProctoringSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProctoringSessionDefaultArgs<ExtArgs>>): Prisma__ProctoringSessionClient<$Result.GetResult<Prisma.$ProctoringSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdminIntervention model
   */ 
  interface AdminInterventionFieldRefs {
    readonly id: FieldRef<"AdminIntervention", 'String'>
    readonly sessionId: FieldRef<"AdminIntervention", 'String'>
    readonly adminId: FieldRef<"AdminIntervention", 'BigInt'>
    readonly interventionType: FieldRef<"AdminIntervention", 'String'>
    readonly message: FieldRef<"AdminIntervention", 'String'>
    readonly actionTaken: FieldRef<"AdminIntervention", 'String'>
    readonly createdAt: FieldRef<"AdminIntervention", 'DateTime'>
    readonly resolved: FieldRef<"AdminIntervention", 'Boolean'>
    readonly resolutionNotes: FieldRef<"AdminIntervention", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdminIntervention findUnique
   */
  export type AdminInterventionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * Filter, which AdminIntervention to fetch.
     */
    where: AdminInterventionWhereUniqueInput
  }

  /**
   * AdminIntervention findUniqueOrThrow
   */
  export type AdminInterventionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * Filter, which AdminIntervention to fetch.
     */
    where: AdminInterventionWhereUniqueInput
  }

  /**
   * AdminIntervention findFirst
   */
  export type AdminInterventionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * Filter, which AdminIntervention to fetch.
     */
    where?: AdminInterventionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminInterventions to fetch.
     */
    orderBy?: AdminInterventionOrderByWithRelationInput | AdminInterventionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminInterventions.
     */
    cursor?: AdminInterventionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminInterventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminInterventions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminInterventions.
     */
    distinct?: AdminInterventionScalarFieldEnum | AdminInterventionScalarFieldEnum[]
  }

  /**
   * AdminIntervention findFirstOrThrow
   */
  export type AdminInterventionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * Filter, which AdminIntervention to fetch.
     */
    where?: AdminInterventionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminInterventions to fetch.
     */
    orderBy?: AdminInterventionOrderByWithRelationInput | AdminInterventionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdminInterventions.
     */
    cursor?: AdminInterventionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminInterventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminInterventions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdminInterventions.
     */
    distinct?: AdminInterventionScalarFieldEnum | AdminInterventionScalarFieldEnum[]
  }

  /**
   * AdminIntervention findMany
   */
  export type AdminInterventionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * Filter, which AdminInterventions to fetch.
     */
    where?: AdminInterventionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdminInterventions to fetch.
     */
    orderBy?: AdminInterventionOrderByWithRelationInput | AdminInterventionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdminInterventions.
     */
    cursor?: AdminInterventionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdminInterventions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdminInterventions.
     */
    skip?: number
    distinct?: AdminInterventionScalarFieldEnum | AdminInterventionScalarFieldEnum[]
  }

  /**
   * AdminIntervention create
   */
  export type AdminInterventionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * The data needed to create a AdminIntervention.
     */
    data: XOR<AdminInterventionCreateInput, AdminInterventionUncheckedCreateInput>
  }

  /**
   * AdminIntervention createMany
   */
  export type AdminInterventionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdminInterventions.
     */
    data: AdminInterventionCreateManyInput | AdminInterventionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdminIntervention createManyAndReturn
   */
  export type AdminInterventionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdminInterventions.
     */
    data: AdminInterventionCreateManyInput | AdminInterventionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdminIntervention update
   */
  export type AdminInterventionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * The data needed to update a AdminIntervention.
     */
    data: XOR<AdminInterventionUpdateInput, AdminInterventionUncheckedUpdateInput>
    /**
     * Choose, which AdminIntervention to update.
     */
    where: AdminInterventionWhereUniqueInput
  }

  /**
   * AdminIntervention updateMany
   */
  export type AdminInterventionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdminInterventions.
     */
    data: XOR<AdminInterventionUpdateManyMutationInput, AdminInterventionUncheckedUpdateManyInput>
    /**
     * Filter which AdminInterventions to update
     */
    where?: AdminInterventionWhereInput
  }

  /**
   * AdminIntervention upsert
   */
  export type AdminInterventionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * The filter to search for the AdminIntervention to update in case it exists.
     */
    where: AdminInterventionWhereUniqueInput
    /**
     * In case the AdminIntervention found by the `where` argument doesn't exist, create a new AdminIntervention with this data.
     */
    create: XOR<AdminInterventionCreateInput, AdminInterventionUncheckedCreateInput>
    /**
     * In case the AdminIntervention was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminInterventionUpdateInput, AdminInterventionUncheckedUpdateInput>
  }

  /**
   * AdminIntervention delete
   */
  export type AdminInterventionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
    /**
     * Filter which AdminIntervention to delete.
     */
    where: AdminInterventionWhereUniqueInput
  }

  /**
   * AdminIntervention deleteMany
   */
  export type AdminInterventionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdminInterventions to delete
     */
    where?: AdminInterventionWhereInput
  }

  /**
   * AdminIntervention without action
   */
  export type AdminInterventionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminIntervention
     */
    select?: AdminInterventionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInterventionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProctoringSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    quizId: 'quizId',
    sessionToken: 'sessionToken',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    riskScore: 'riskScore',
    violationsCount: 'violationsCount',
    identityVerified: 'identityVerified',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    browserFingerprint: 'browserFingerprint',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProctoringSessionScalarFieldEnum = (typeof ProctoringSessionScalarFieldEnum)[keyof typeof ProctoringSessionScalarFieldEnum]


  export const ViolationScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    type: 'type',
    description: 'description',
    confidence: 'confidence',
    severity: 'severity',
    screenshotUrl: 'screenshotUrl',
    metadata: 'metadata',
    detectedAt: 'detectedAt',
    processed: 'processed',
    actionTaken: 'actionTaken'
  };

  export type ViolationScalarFieldEnum = (typeof ViolationScalarFieldEnum)[keyof typeof ViolationScalarFieldEnum]


  export const SessionAnalyticScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    eventType: 'eventType',
    eventData: 'eventData',
    mouseMovements: 'mouseMovements',
    keystrokeCount: 'keystrokeCount',
    focusLossCount: 'focusLossCount',
    tabSwitches: 'tabSwitches',
    windowBlurCount: 'windowBlurCount',
    recordedAt: 'recordedAt'
  };

  export type SessionAnalyticScalarFieldEnum = (typeof SessionAnalyticScalarFieldEnum)[keyof typeof SessionAnalyticScalarFieldEnum]


  export const IdentityVerificationScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    verificationType: 'verificationType',
    referenceImageUrl: 'referenceImageUrl',
    verificationImageUrl: 'verificationImageUrl',
    confidenceScore: 'confidenceScore',
    verificationResult: 'verificationResult',
    failureReason: 'failureReason',
    verifiedAt: 'verifiedAt',
    biometricData: 'biometricData'
  };

  export type IdentityVerificationScalarFieldEnum = (typeof IdentityVerificationScalarFieldEnum)[keyof typeof IdentityVerificationScalarFieldEnum]


  export const PlagiarismReportScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    submissionId: 'submissionId',
    language: 'language',
    similarityScore: 'similarityScore',
    matchesFound: 'matchesFound',
    reportUrl: 'reportUrl',
    reportData: 'reportData',
    generatedAt: 'generatedAt',
    status: 'status'
  };

  export type PlagiarismReportScalarFieldEnum = (typeof PlagiarismReportScalarFieldEnum)[keyof typeof PlagiarismReportScalarFieldEnum]


  export const AdminInterventionScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    adminId: 'adminId',
    interventionType: 'interventionType',
    message: 'message',
    actionTaken: 'actionTaken',
    createdAt: 'createdAt',
    resolved: 'resolved',
    resolutionNotes: 'resolutionNotes'
  };

  export type AdminInterventionScalarFieldEnum = (typeof AdminInterventionScalarFieldEnum)[keyof typeof AdminInterventionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type ProctoringSessionWhereInput = {
    AND?: ProctoringSessionWhereInput | ProctoringSessionWhereInput[]
    OR?: ProctoringSessionWhereInput[]
    NOT?: ProctoringSessionWhereInput | ProctoringSessionWhereInput[]
    id?: StringFilter<"ProctoringSession"> | string
    userId?: BigIntFilter<"ProctoringSession"> | bigint | number
    quizId?: BigIntFilter<"ProctoringSession"> | bigint | number
    sessionToken?: StringFilter<"ProctoringSession"> | string
    startTime?: DateTimeFilter<"ProctoringSession"> | Date | string
    endTime?: DateTimeNullableFilter<"ProctoringSession"> | Date | string | null
    status?: StringFilter<"ProctoringSession"> | string
    riskScore?: FloatFilter<"ProctoringSession"> | number
    violationsCount?: IntFilter<"ProctoringSession"> | number
    identityVerified?: BoolFilter<"ProctoringSession"> | boolean
    ipAddress?: StringNullableFilter<"ProctoringSession"> | string | null
    userAgent?: StringNullableFilter<"ProctoringSession"> | string | null
    browserFingerprint?: StringNullableFilter<"ProctoringSession"> | string | null
    createdAt?: DateTimeFilter<"ProctoringSession"> | Date | string
    updatedAt?: DateTimeFilter<"ProctoringSession"> | Date | string
    violations?: ViolationListRelationFilter
    analytics?: SessionAnalyticListRelationFilter
    identityVerifications?: IdentityVerificationListRelationFilter
    plagiarismReports?: PlagiarismReportListRelationFilter
    adminInterventions?: AdminInterventionListRelationFilter
  }

  export type ProctoringSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    sessionToken?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    status?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
    identityVerified?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    browserFingerprint?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    violations?: ViolationOrderByRelationAggregateInput
    analytics?: SessionAnalyticOrderByRelationAggregateInput
    identityVerifications?: IdentityVerificationOrderByRelationAggregateInput
    plagiarismReports?: PlagiarismReportOrderByRelationAggregateInput
    adminInterventions?: AdminInterventionOrderByRelationAggregateInput
  }

  export type ProctoringSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: ProctoringSessionWhereInput | ProctoringSessionWhereInput[]
    OR?: ProctoringSessionWhereInput[]
    NOT?: ProctoringSessionWhereInput | ProctoringSessionWhereInput[]
    userId?: BigIntFilter<"ProctoringSession"> | bigint | number
    quizId?: BigIntFilter<"ProctoringSession"> | bigint | number
    startTime?: DateTimeFilter<"ProctoringSession"> | Date | string
    endTime?: DateTimeNullableFilter<"ProctoringSession"> | Date | string | null
    status?: StringFilter<"ProctoringSession"> | string
    riskScore?: FloatFilter<"ProctoringSession"> | number
    violationsCount?: IntFilter<"ProctoringSession"> | number
    identityVerified?: BoolFilter<"ProctoringSession"> | boolean
    ipAddress?: StringNullableFilter<"ProctoringSession"> | string | null
    userAgent?: StringNullableFilter<"ProctoringSession"> | string | null
    browserFingerprint?: StringNullableFilter<"ProctoringSession"> | string | null
    createdAt?: DateTimeFilter<"ProctoringSession"> | Date | string
    updatedAt?: DateTimeFilter<"ProctoringSession"> | Date | string
    violations?: ViolationListRelationFilter
    analytics?: SessionAnalyticListRelationFilter
    identityVerifications?: IdentityVerificationListRelationFilter
    plagiarismReports?: PlagiarismReportListRelationFilter
    adminInterventions?: AdminInterventionListRelationFilter
  }, "id" | "sessionToken">

  export type ProctoringSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    sessionToken?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    status?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
    identityVerified?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    browserFingerprint?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProctoringSessionCountOrderByAggregateInput
    _avg?: ProctoringSessionAvgOrderByAggregateInput
    _max?: ProctoringSessionMaxOrderByAggregateInput
    _min?: ProctoringSessionMinOrderByAggregateInput
    _sum?: ProctoringSessionSumOrderByAggregateInput
  }

  export type ProctoringSessionScalarWhereWithAggregatesInput = {
    AND?: ProctoringSessionScalarWhereWithAggregatesInput | ProctoringSessionScalarWhereWithAggregatesInput[]
    OR?: ProctoringSessionScalarWhereWithAggregatesInput[]
    NOT?: ProctoringSessionScalarWhereWithAggregatesInput | ProctoringSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProctoringSession"> | string
    userId?: BigIntWithAggregatesFilter<"ProctoringSession"> | bigint | number
    quizId?: BigIntWithAggregatesFilter<"ProctoringSession"> | bigint | number
    sessionToken?: StringWithAggregatesFilter<"ProctoringSession"> | string
    startTime?: DateTimeWithAggregatesFilter<"ProctoringSession"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"ProctoringSession"> | Date | string | null
    status?: StringWithAggregatesFilter<"ProctoringSession"> | string
    riskScore?: FloatWithAggregatesFilter<"ProctoringSession"> | number
    violationsCount?: IntWithAggregatesFilter<"ProctoringSession"> | number
    identityVerified?: BoolWithAggregatesFilter<"ProctoringSession"> | boolean
    ipAddress?: StringNullableWithAggregatesFilter<"ProctoringSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ProctoringSession"> | string | null
    browserFingerprint?: StringNullableWithAggregatesFilter<"ProctoringSession"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProctoringSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProctoringSession"> | Date | string
  }

  export type ViolationWhereInput = {
    AND?: ViolationWhereInput | ViolationWhereInput[]
    OR?: ViolationWhereInput[]
    NOT?: ViolationWhereInput | ViolationWhereInput[]
    id?: StringFilter<"Violation"> | string
    sessionId?: StringFilter<"Violation"> | string
    type?: StringFilter<"Violation"> | string
    description?: StringNullableFilter<"Violation"> | string | null
    confidence?: FloatFilter<"Violation"> | number
    severity?: StringFilter<"Violation"> | string
    screenshotUrl?: StringNullableFilter<"Violation"> | string | null
    metadata?: JsonNullableFilter<"Violation">
    detectedAt?: DateTimeFilter<"Violation"> | Date | string
    processed?: BoolFilter<"Violation"> | boolean
    actionTaken?: StringNullableFilter<"Violation"> | string | null
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }

  export type ViolationOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    confidence?: SortOrder
    severity?: SortOrder
    screenshotUrl?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    detectedAt?: SortOrder
    processed?: SortOrder
    actionTaken?: SortOrderInput | SortOrder
    session?: ProctoringSessionOrderByWithRelationInput
  }

  export type ViolationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ViolationWhereInput | ViolationWhereInput[]
    OR?: ViolationWhereInput[]
    NOT?: ViolationWhereInput | ViolationWhereInput[]
    sessionId?: StringFilter<"Violation"> | string
    type?: StringFilter<"Violation"> | string
    description?: StringNullableFilter<"Violation"> | string | null
    confidence?: FloatFilter<"Violation"> | number
    severity?: StringFilter<"Violation"> | string
    screenshotUrl?: StringNullableFilter<"Violation"> | string | null
    metadata?: JsonNullableFilter<"Violation">
    detectedAt?: DateTimeFilter<"Violation"> | Date | string
    processed?: BoolFilter<"Violation"> | boolean
    actionTaken?: StringNullableFilter<"Violation"> | string | null
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }, "id">

  export type ViolationOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    type?: SortOrder
    description?: SortOrderInput | SortOrder
    confidence?: SortOrder
    severity?: SortOrder
    screenshotUrl?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    detectedAt?: SortOrder
    processed?: SortOrder
    actionTaken?: SortOrderInput | SortOrder
    _count?: ViolationCountOrderByAggregateInput
    _avg?: ViolationAvgOrderByAggregateInput
    _max?: ViolationMaxOrderByAggregateInput
    _min?: ViolationMinOrderByAggregateInput
    _sum?: ViolationSumOrderByAggregateInput
  }

  export type ViolationScalarWhereWithAggregatesInput = {
    AND?: ViolationScalarWhereWithAggregatesInput | ViolationScalarWhereWithAggregatesInput[]
    OR?: ViolationScalarWhereWithAggregatesInput[]
    NOT?: ViolationScalarWhereWithAggregatesInput | ViolationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Violation"> | string
    sessionId?: StringWithAggregatesFilter<"Violation"> | string
    type?: StringWithAggregatesFilter<"Violation"> | string
    description?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    confidence?: FloatWithAggregatesFilter<"Violation"> | number
    severity?: StringWithAggregatesFilter<"Violation"> | string
    screenshotUrl?: StringNullableWithAggregatesFilter<"Violation"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Violation">
    detectedAt?: DateTimeWithAggregatesFilter<"Violation"> | Date | string
    processed?: BoolWithAggregatesFilter<"Violation"> | boolean
    actionTaken?: StringNullableWithAggregatesFilter<"Violation"> | string | null
  }

  export type SessionAnalyticWhereInput = {
    AND?: SessionAnalyticWhereInput | SessionAnalyticWhereInput[]
    OR?: SessionAnalyticWhereInput[]
    NOT?: SessionAnalyticWhereInput | SessionAnalyticWhereInput[]
    id?: StringFilter<"SessionAnalytic"> | string
    sessionId?: StringFilter<"SessionAnalytic"> | string
    eventType?: StringFilter<"SessionAnalytic"> | string
    eventData?: JsonNullableFilter<"SessionAnalytic">
    mouseMovements?: IntFilter<"SessionAnalytic"> | number
    keystrokeCount?: IntFilter<"SessionAnalytic"> | number
    focusLossCount?: IntFilter<"SessionAnalytic"> | number
    tabSwitches?: IntFilter<"SessionAnalytic"> | number
    windowBlurCount?: IntFilter<"SessionAnalytic"> | number
    recordedAt?: DateTimeFilter<"SessionAnalytic"> | Date | string
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }

  export type SessionAnalyticOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    eventData?: SortOrderInput | SortOrder
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
    recordedAt?: SortOrder
    session?: ProctoringSessionOrderByWithRelationInput
  }

  export type SessionAnalyticWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionAnalyticWhereInput | SessionAnalyticWhereInput[]
    OR?: SessionAnalyticWhereInput[]
    NOT?: SessionAnalyticWhereInput | SessionAnalyticWhereInput[]
    sessionId?: StringFilter<"SessionAnalytic"> | string
    eventType?: StringFilter<"SessionAnalytic"> | string
    eventData?: JsonNullableFilter<"SessionAnalytic">
    mouseMovements?: IntFilter<"SessionAnalytic"> | number
    keystrokeCount?: IntFilter<"SessionAnalytic"> | number
    focusLossCount?: IntFilter<"SessionAnalytic"> | number
    tabSwitches?: IntFilter<"SessionAnalytic"> | number
    windowBlurCount?: IntFilter<"SessionAnalytic"> | number
    recordedAt?: DateTimeFilter<"SessionAnalytic"> | Date | string
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }, "id">

  export type SessionAnalyticOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    eventData?: SortOrderInput | SortOrder
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
    recordedAt?: SortOrder
    _count?: SessionAnalyticCountOrderByAggregateInput
    _avg?: SessionAnalyticAvgOrderByAggregateInput
    _max?: SessionAnalyticMaxOrderByAggregateInput
    _min?: SessionAnalyticMinOrderByAggregateInput
    _sum?: SessionAnalyticSumOrderByAggregateInput
  }

  export type SessionAnalyticScalarWhereWithAggregatesInput = {
    AND?: SessionAnalyticScalarWhereWithAggregatesInput | SessionAnalyticScalarWhereWithAggregatesInput[]
    OR?: SessionAnalyticScalarWhereWithAggregatesInput[]
    NOT?: SessionAnalyticScalarWhereWithAggregatesInput | SessionAnalyticScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SessionAnalytic"> | string
    sessionId?: StringWithAggregatesFilter<"SessionAnalytic"> | string
    eventType?: StringWithAggregatesFilter<"SessionAnalytic"> | string
    eventData?: JsonNullableWithAggregatesFilter<"SessionAnalytic">
    mouseMovements?: IntWithAggregatesFilter<"SessionAnalytic"> | number
    keystrokeCount?: IntWithAggregatesFilter<"SessionAnalytic"> | number
    focusLossCount?: IntWithAggregatesFilter<"SessionAnalytic"> | number
    tabSwitches?: IntWithAggregatesFilter<"SessionAnalytic"> | number
    windowBlurCount?: IntWithAggregatesFilter<"SessionAnalytic"> | number
    recordedAt?: DateTimeWithAggregatesFilter<"SessionAnalytic"> | Date | string
  }

  export type IdentityVerificationWhereInput = {
    AND?: IdentityVerificationWhereInput | IdentityVerificationWhereInput[]
    OR?: IdentityVerificationWhereInput[]
    NOT?: IdentityVerificationWhereInput | IdentityVerificationWhereInput[]
    id?: StringFilter<"IdentityVerification"> | string
    sessionId?: StringFilter<"IdentityVerification"> | string
    verificationType?: StringFilter<"IdentityVerification"> | string
    referenceImageUrl?: StringNullableFilter<"IdentityVerification"> | string | null
    verificationImageUrl?: StringNullableFilter<"IdentityVerification"> | string | null
    confidenceScore?: FloatNullableFilter<"IdentityVerification"> | number | null
    verificationResult?: StringNullableFilter<"IdentityVerification"> | string | null
    failureReason?: StringNullableFilter<"IdentityVerification"> | string | null
    verifiedAt?: DateTimeFilter<"IdentityVerification"> | Date | string
    biometricData?: JsonNullableFilter<"IdentityVerification">
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }

  export type IdentityVerificationOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    verificationType?: SortOrder
    referenceImageUrl?: SortOrderInput | SortOrder
    verificationImageUrl?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    verificationResult?: SortOrderInput | SortOrder
    failureReason?: SortOrderInput | SortOrder
    verifiedAt?: SortOrder
    biometricData?: SortOrderInput | SortOrder
    session?: ProctoringSessionOrderByWithRelationInput
  }

  export type IdentityVerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IdentityVerificationWhereInput | IdentityVerificationWhereInput[]
    OR?: IdentityVerificationWhereInput[]
    NOT?: IdentityVerificationWhereInput | IdentityVerificationWhereInput[]
    sessionId?: StringFilter<"IdentityVerification"> | string
    verificationType?: StringFilter<"IdentityVerification"> | string
    referenceImageUrl?: StringNullableFilter<"IdentityVerification"> | string | null
    verificationImageUrl?: StringNullableFilter<"IdentityVerification"> | string | null
    confidenceScore?: FloatNullableFilter<"IdentityVerification"> | number | null
    verificationResult?: StringNullableFilter<"IdentityVerification"> | string | null
    failureReason?: StringNullableFilter<"IdentityVerification"> | string | null
    verifiedAt?: DateTimeFilter<"IdentityVerification"> | Date | string
    biometricData?: JsonNullableFilter<"IdentityVerification">
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }, "id">

  export type IdentityVerificationOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    verificationType?: SortOrder
    referenceImageUrl?: SortOrderInput | SortOrder
    verificationImageUrl?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    verificationResult?: SortOrderInput | SortOrder
    failureReason?: SortOrderInput | SortOrder
    verifiedAt?: SortOrder
    biometricData?: SortOrderInput | SortOrder
    _count?: IdentityVerificationCountOrderByAggregateInput
    _avg?: IdentityVerificationAvgOrderByAggregateInput
    _max?: IdentityVerificationMaxOrderByAggregateInput
    _min?: IdentityVerificationMinOrderByAggregateInput
    _sum?: IdentityVerificationSumOrderByAggregateInput
  }

  export type IdentityVerificationScalarWhereWithAggregatesInput = {
    AND?: IdentityVerificationScalarWhereWithAggregatesInput | IdentityVerificationScalarWhereWithAggregatesInput[]
    OR?: IdentityVerificationScalarWhereWithAggregatesInput[]
    NOT?: IdentityVerificationScalarWhereWithAggregatesInput | IdentityVerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IdentityVerification"> | string
    sessionId?: StringWithAggregatesFilter<"IdentityVerification"> | string
    verificationType?: StringWithAggregatesFilter<"IdentityVerification"> | string
    referenceImageUrl?: StringNullableWithAggregatesFilter<"IdentityVerification"> | string | null
    verificationImageUrl?: StringNullableWithAggregatesFilter<"IdentityVerification"> | string | null
    confidenceScore?: FloatNullableWithAggregatesFilter<"IdentityVerification"> | number | null
    verificationResult?: StringNullableWithAggregatesFilter<"IdentityVerification"> | string | null
    failureReason?: StringNullableWithAggregatesFilter<"IdentityVerification"> | string | null
    verifiedAt?: DateTimeWithAggregatesFilter<"IdentityVerification"> | Date | string
    biometricData?: JsonNullableWithAggregatesFilter<"IdentityVerification">
  }

  export type PlagiarismReportWhereInput = {
    AND?: PlagiarismReportWhereInput | PlagiarismReportWhereInput[]
    OR?: PlagiarismReportWhereInput[]
    NOT?: PlagiarismReportWhereInput | PlagiarismReportWhereInput[]
    id?: StringFilter<"PlagiarismReport"> | string
    sessionId?: StringFilter<"PlagiarismReport"> | string
    submissionId?: StringNullableFilter<"PlagiarismReport"> | string | null
    language?: StringNullableFilter<"PlagiarismReport"> | string | null
    similarityScore?: FloatNullableFilter<"PlagiarismReport"> | number | null
    matchesFound?: IntFilter<"PlagiarismReport"> | number
    reportUrl?: StringNullableFilter<"PlagiarismReport"> | string | null
    reportData?: JsonNullableFilter<"PlagiarismReport">
    generatedAt?: DateTimeFilter<"PlagiarismReport"> | Date | string
    status?: StringFilter<"PlagiarismReport"> | string
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }

  export type PlagiarismReportOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    submissionId?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    similarityScore?: SortOrderInput | SortOrder
    matchesFound?: SortOrder
    reportUrl?: SortOrderInput | SortOrder
    reportData?: SortOrderInput | SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    session?: ProctoringSessionOrderByWithRelationInput
  }

  export type PlagiarismReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlagiarismReportWhereInput | PlagiarismReportWhereInput[]
    OR?: PlagiarismReportWhereInput[]
    NOT?: PlagiarismReportWhereInput | PlagiarismReportWhereInput[]
    sessionId?: StringFilter<"PlagiarismReport"> | string
    submissionId?: StringNullableFilter<"PlagiarismReport"> | string | null
    language?: StringNullableFilter<"PlagiarismReport"> | string | null
    similarityScore?: FloatNullableFilter<"PlagiarismReport"> | number | null
    matchesFound?: IntFilter<"PlagiarismReport"> | number
    reportUrl?: StringNullableFilter<"PlagiarismReport"> | string | null
    reportData?: JsonNullableFilter<"PlagiarismReport">
    generatedAt?: DateTimeFilter<"PlagiarismReport"> | Date | string
    status?: StringFilter<"PlagiarismReport"> | string
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }, "id">

  export type PlagiarismReportOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    submissionId?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    similarityScore?: SortOrderInput | SortOrder
    matchesFound?: SortOrder
    reportUrl?: SortOrderInput | SortOrder
    reportData?: SortOrderInput | SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
    _count?: PlagiarismReportCountOrderByAggregateInput
    _avg?: PlagiarismReportAvgOrderByAggregateInput
    _max?: PlagiarismReportMaxOrderByAggregateInput
    _min?: PlagiarismReportMinOrderByAggregateInput
    _sum?: PlagiarismReportSumOrderByAggregateInput
  }

  export type PlagiarismReportScalarWhereWithAggregatesInput = {
    AND?: PlagiarismReportScalarWhereWithAggregatesInput | PlagiarismReportScalarWhereWithAggregatesInput[]
    OR?: PlagiarismReportScalarWhereWithAggregatesInput[]
    NOT?: PlagiarismReportScalarWhereWithAggregatesInput | PlagiarismReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlagiarismReport"> | string
    sessionId?: StringWithAggregatesFilter<"PlagiarismReport"> | string
    submissionId?: StringNullableWithAggregatesFilter<"PlagiarismReport"> | string | null
    language?: StringNullableWithAggregatesFilter<"PlagiarismReport"> | string | null
    similarityScore?: FloatNullableWithAggregatesFilter<"PlagiarismReport"> | number | null
    matchesFound?: IntWithAggregatesFilter<"PlagiarismReport"> | number
    reportUrl?: StringNullableWithAggregatesFilter<"PlagiarismReport"> | string | null
    reportData?: JsonNullableWithAggregatesFilter<"PlagiarismReport">
    generatedAt?: DateTimeWithAggregatesFilter<"PlagiarismReport"> | Date | string
    status?: StringWithAggregatesFilter<"PlagiarismReport"> | string
  }

  export type AdminInterventionWhereInput = {
    AND?: AdminInterventionWhereInput | AdminInterventionWhereInput[]
    OR?: AdminInterventionWhereInput[]
    NOT?: AdminInterventionWhereInput | AdminInterventionWhereInput[]
    id?: StringFilter<"AdminIntervention"> | string
    sessionId?: StringFilter<"AdminIntervention"> | string
    adminId?: BigIntFilter<"AdminIntervention"> | bigint | number
    interventionType?: StringFilter<"AdminIntervention"> | string
    message?: StringNullableFilter<"AdminIntervention"> | string | null
    actionTaken?: StringNullableFilter<"AdminIntervention"> | string | null
    createdAt?: DateTimeFilter<"AdminIntervention"> | Date | string
    resolved?: BoolFilter<"AdminIntervention"> | boolean
    resolutionNotes?: StringNullableFilter<"AdminIntervention"> | string | null
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }

  export type AdminInterventionOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
    interventionType?: SortOrder
    message?: SortOrderInput | SortOrder
    actionTaken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resolved?: SortOrder
    resolutionNotes?: SortOrderInput | SortOrder
    session?: ProctoringSessionOrderByWithRelationInput
  }

  export type AdminInterventionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminInterventionWhereInput | AdminInterventionWhereInput[]
    OR?: AdminInterventionWhereInput[]
    NOT?: AdminInterventionWhereInput | AdminInterventionWhereInput[]
    sessionId?: StringFilter<"AdminIntervention"> | string
    adminId?: BigIntFilter<"AdminIntervention"> | bigint | number
    interventionType?: StringFilter<"AdminIntervention"> | string
    message?: StringNullableFilter<"AdminIntervention"> | string | null
    actionTaken?: StringNullableFilter<"AdminIntervention"> | string | null
    createdAt?: DateTimeFilter<"AdminIntervention"> | Date | string
    resolved?: BoolFilter<"AdminIntervention"> | boolean
    resolutionNotes?: StringNullableFilter<"AdminIntervention"> | string | null
    session?: XOR<ProctoringSessionRelationFilter, ProctoringSessionWhereInput>
  }, "id">

  export type AdminInterventionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
    interventionType?: SortOrder
    message?: SortOrderInput | SortOrder
    actionTaken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resolved?: SortOrder
    resolutionNotes?: SortOrderInput | SortOrder
    _count?: AdminInterventionCountOrderByAggregateInput
    _avg?: AdminInterventionAvgOrderByAggregateInput
    _max?: AdminInterventionMaxOrderByAggregateInput
    _min?: AdminInterventionMinOrderByAggregateInput
    _sum?: AdminInterventionSumOrderByAggregateInput
  }

  export type AdminInterventionScalarWhereWithAggregatesInput = {
    AND?: AdminInterventionScalarWhereWithAggregatesInput | AdminInterventionScalarWhereWithAggregatesInput[]
    OR?: AdminInterventionScalarWhereWithAggregatesInput[]
    NOT?: AdminInterventionScalarWhereWithAggregatesInput | AdminInterventionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdminIntervention"> | string
    sessionId?: StringWithAggregatesFilter<"AdminIntervention"> | string
    adminId?: BigIntWithAggregatesFilter<"AdminIntervention"> | bigint | number
    interventionType?: StringWithAggregatesFilter<"AdminIntervention"> | string
    message?: StringNullableWithAggregatesFilter<"AdminIntervention"> | string | null
    actionTaken?: StringNullableWithAggregatesFilter<"AdminIntervention"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AdminIntervention"> | Date | string
    resolved?: BoolWithAggregatesFilter<"AdminIntervention"> | boolean
    resolutionNotes?: StringNullableWithAggregatesFilter<"AdminIntervention"> | string | null
  }

  export type ProctoringSessionCreateInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUncheckedCreateInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationUncheckedCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticUncheckedCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationUncheckedCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportUncheckedCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUncheckedUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUncheckedUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUncheckedUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUncheckedUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionCreateManyInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProctoringSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProctoringSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ViolationCreateInput = {
    id?: string
    type: string
    description?: string | null
    confidence?: number
    severity?: string
    screenshotUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: Date | string
    processed?: boolean
    actionTaken?: string | null
    session: ProctoringSessionCreateNestedOneWithoutViolationsInput
  }

  export type ViolationUncheckedCreateInput = {
    id?: string
    sessionId: string
    type: string
    description?: string | null
    confidence?: number
    severity?: string
    screenshotUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: Date | string
    processed?: boolean
    actionTaken?: string | null
  }

  export type ViolationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    session?: ProctoringSessionUpdateOneRequiredWithoutViolationsNestedInput
  }

  export type ViolationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViolationCreateManyInput = {
    id?: string
    sessionId: string
    type: string
    description?: string | null
    confidence?: number
    severity?: string
    screenshotUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: Date | string
    processed?: boolean
    actionTaken?: string | null
  }

  export type ViolationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViolationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionAnalyticCreateInput = {
    id?: string
    eventType: string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: number
    keystrokeCount?: number
    focusLossCount?: number
    tabSwitches?: number
    windowBlurCount?: number
    recordedAt?: Date | string
    session: ProctoringSessionCreateNestedOneWithoutAnalyticsInput
  }

  export type SessionAnalyticUncheckedCreateInput = {
    id?: string
    sessionId: string
    eventType: string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: number
    keystrokeCount?: number
    focusLossCount?: number
    tabSwitches?: number
    windowBlurCount?: number
    recordedAt?: Date | string
  }

  export type SessionAnalyticUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ProctoringSessionUpdateOneRequiredWithoutAnalyticsNestedInput
  }

  export type SessionAnalyticUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionAnalyticCreateManyInput = {
    id?: string
    sessionId: string
    eventType: string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: number
    keystrokeCount?: number
    focusLossCount?: number
    tabSwitches?: number
    windowBlurCount?: number
    recordedAt?: Date | string
  }

  export type SessionAnalyticUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionAnalyticUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IdentityVerificationCreateInput = {
    id?: string
    verificationType: string
    referenceImageUrl?: string | null
    verificationImageUrl?: string | null
    confidenceScore?: number | null
    verificationResult?: string | null
    failureReason?: string | null
    verifiedAt?: Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
    session: ProctoringSessionCreateNestedOneWithoutIdentityVerificationsInput
  }

  export type IdentityVerificationUncheckedCreateInput = {
    id?: string
    sessionId: string
    verificationType: string
    referenceImageUrl?: string | null
    verificationImageUrl?: string | null
    confidenceScore?: number | null
    verificationResult?: string | null
    failureReason?: string | null
    verifiedAt?: Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
    session?: ProctoringSessionUpdateOneRequiredWithoutIdentityVerificationsNestedInput
  }

  export type IdentityVerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationCreateManyInput = {
    id?: string
    sessionId: string
    verificationType: string
    referenceImageUrl?: string | null
    verificationImageUrl?: string | null
    confidenceScore?: number | null
    verificationResult?: string | null
    failureReason?: string | null
    verifiedAt?: Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlagiarismReportCreateInput = {
    id?: string
    submissionId?: string | null
    language?: string | null
    similarityScore?: number | null
    matchesFound?: number
    reportUrl?: string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: Date | string
    status?: string
    session: ProctoringSessionCreateNestedOneWithoutPlagiarismReportsInput
  }

  export type PlagiarismReportUncheckedCreateInput = {
    id?: string
    sessionId: string
    submissionId?: string | null
    language?: string | null
    similarityScore?: number | null
    matchesFound?: number
    reportUrl?: string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: Date | string
    status?: string
  }

  export type PlagiarismReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    session?: ProctoringSessionUpdateOneRequiredWithoutPlagiarismReportsNestedInput
  }

  export type PlagiarismReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PlagiarismReportCreateManyInput = {
    id?: string
    sessionId: string
    submissionId?: string | null
    language?: string | null
    similarityScore?: number | null
    matchesFound?: number
    reportUrl?: string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: Date | string
    status?: string
  }

  export type PlagiarismReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PlagiarismReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AdminInterventionCreateInput = {
    id?: string
    adminId: bigint | number
    interventionType: string
    message?: string | null
    actionTaken?: string | null
    createdAt?: Date | string
    resolved?: boolean
    resolutionNotes?: string | null
    session: ProctoringSessionCreateNestedOneWithoutAdminInterventionsInput
  }

  export type AdminInterventionUncheckedCreateInput = {
    id?: string
    sessionId: string
    adminId: bigint | number
    interventionType: string
    message?: string | null
    actionTaken?: string | null
    createdAt?: Date | string
    resolved?: boolean
    resolutionNotes?: string | null
  }

  export type AdminInterventionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    session?: ProctoringSessionUpdateOneRequiredWithoutAdminInterventionsNestedInput
  }

  export type AdminInterventionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminInterventionCreateManyInput = {
    id?: string
    sessionId: string
    adminId: bigint | number
    interventionType: string
    message?: string | null
    actionTaken?: string | null
    createdAt?: Date | string
    resolved?: boolean
    resolutionNotes?: string | null
  }

  export type AdminInterventionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminInterventionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ViolationListRelationFilter = {
    every?: ViolationWhereInput
    some?: ViolationWhereInput
    none?: ViolationWhereInput
  }

  export type SessionAnalyticListRelationFilter = {
    every?: SessionAnalyticWhereInput
    some?: SessionAnalyticWhereInput
    none?: SessionAnalyticWhereInput
  }

  export type IdentityVerificationListRelationFilter = {
    every?: IdentityVerificationWhereInput
    some?: IdentityVerificationWhereInput
    none?: IdentityVerificationWhereInput
  }

  export type PlagiarismReportListRelationFilter = {
    every?: PlagiarismReportWhereInput
    some?: PlagiarismReportWhereInput
    none?: PlagiarismReportWhereInput
  }

  export type AdminInterventionListRelationFilter = {
    every?: AdminInterventionWhereInput
    some?: AdminInterventionWhereInput
    none?: AdminInterventionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ViolationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionAnalyticOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IdentityVerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlagiarismReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminInterventionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProctoringSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    sessionToken?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
    identityVerified?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    browserFingerprint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProctoringSessionAvgOrderByAggregateInput = {
    userId?: SortOrder
    quizId?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
  }

  export type ProctoringSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    sessionToken?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
    identityVerified?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    browserFingerprint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProctoringSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    quizId?: SortOrder
    sessionToken?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
    identityVerified?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    browserFingerprint?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProctoringSessionSumOrderByAggregateInput = {
    userId?: SortOrder
    quizId?: SortOrder
    riskScore?: SortOrder
    violationsCount?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProctoringSessionRelationFilter = {
    is?: ProctoringSessionWhereInput
    isNot?: ProctoringSessionWhereInput
  }

  export type ViolationCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    confidence?: SortOrder
    severity?: SortOrder
    screenshotUrl?: SortOrder
    metadata?: SortOrder
    detectedAt?: SortOrder
    processed?: SortOrder
    actionTaken?: SortOrder
  }

  export type ViolationAvgOrderByAggregateInput = {
    confidence?: SortOrder
  }

  export type ViolationMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    confidence?: SortOrder
    severity?: SortOrder
    screenshotUrl?: SortOrder
    detectedAt?: SortOrder
    processed?: SortOrder
    actionTaken?: SortOrder
  }

  export type ViolationMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    type?: SortOrder
    description?: SortOrder
    confidence?: SortOrder
    severity?: SortOrder
    screenshotUrl?: SortOrder
    detectedAt?: SortOrder
    processed?: SortOrder
    actionTaken?: SortOrder
  }

  export type ViolationSumOrderByAggregateInput = {
    confidence?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type SessionAnalyticCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    eventData?: SortOrder
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
    recordedAt?: SortOrder
  }

  export type SessionAnalyticAvgOrderByAggregateInput = {
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
  }

  export type SessionAnalyticMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
    recordedAt?: SortOrder
  }

  export type SessionAnalyticMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    eventType?: SortOrder
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
    recordedAt?: SortOrder
  }

  export type SessionAnalyticSumOrderByAggregateInput = {
    mouseMovements?: SortOrder
    keystrokeCount?: SortOrder
    focusLossCount?: SortOrder
    tabSwitches?: SortOrder
    windowBlurCount?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IdentityVerificationCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    verificationType?: SortOrder
    referenceImageUrl?: SortOrder
    verificationImageUrl?: SortOrder
    confidenceScore?: SortOrder
    verificationResult?: SortOrder
    failureReason?: SortOrder
    verifiedAt?: SortOrder
    biometricData?: SortOrder
  }

  export type IdentityVerificationAvgOrderByAggregateInput = {
    confidenceScore?: SortOrder
  }

  export type IdentityVerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    verificationType?: SortOrder
    referenceImageUrl?: SortOrder
    verificationImageUrl?: SortOrder
    confidenceScore?: SortOrder
    verificationResult?: SortOrder
    failureReason?: SortOrder
    verifiedAt?: SortOrder
  }

  export type IdentityVerificationMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    verificationType?: SortOrder
    referenceImageUrl?: SortOrder
    verificationImageUrl?: SortOrder
    confidenceScore?: SortOrder
    verificationResult?: SortOrder
    failureReason?: SortOrder
    verifiedAt?: SortOrder
  }

  export type IdentityVerificationSumOrderByAggregateInput = {
    confidenceScore?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PlagiarismReportCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    submissionId?: SortOrder
    language?: SortOrder
    similarityScore?: SortOrder
    matchesFound?: SortOrder
    reportUrl?: SortOrder
    reportData?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
  }

  export type PlagiarismReportAvgOrderByAggregateInput = {
    similarityScore?: SortOrder
    matchesFound?: SortOrder
  }

  export type PlagiarismReportMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    submissionId?: SortOrder
    language?: SortOrder
    similarityScore?: SortOrder
    matchesFound?: SortOrder
    reportUrl?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
  }

  export type PlagiarismReportMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    submissionId?: SortOrder
    language?: SortOrder
    similarityScore?: SortOrder
    matchesFound?: SortOrder
    reportUrl?: SortOrder
    generatedAt?: SortOrder
    status?: SortOrder
  }

  export type PlagiarismReportSumOrderByAggregateInput = {
    similarityScore?: SortOrder
    matchesFound?: SortOrder
  }

  export type AdminInterventionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
    interventionType?: SortOrder
    message?: SortOrder
    actionTaken?: SortOrder
    createdAt?: SortOrder
    resolved?: SortOrder
    resolutionNotes?: SortOrder
  }

  export type AdminInterventionAvgOrderByAggregateInput = {
    adminId?: SortOrder
  }

  export type AdminInterventionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
    interventionType?: SortOrder
    message?: SortOrder
    actionTaken?: SortOrder
    createdAt?: SortOrder
    resolved?: SortOrder
    resolutionNotes?: SortOrder
  }

  export type AdminInterventionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    adminId?: SortOrder
    interventionType?: SortOrder
    message?: SortOrder
    actionTaken?: SortOrder
    createdAt?: SortOrder
    resolved?: SortOrder
    resolutionNotes?: SortOrder
  }

  export type AdminInterventionSumOrderByAggregateInput = {
    adminId?: SortOrder
  }

  export type ViolationCreateNestedManyWithoutSessionInput = {
    create?: XOR<ViolationCreateWithoutSessionInput, ViolationUncheckedCreateWithoutSessionInput> | ViolationCreateWithoutSessionInput[] | ViolationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutSessionInput | ViolationCreateOrConnectWithoutSessionInput[]
    createMany?: ViolationCreateManySessionInputEnvelope
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
  }

  export type SessionAnalyticCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionAnalyticCreateWithoutSessionInput, SessionAnalyticUncheckedCreateWithoutSessionInput> | SessionAnalyticCreateWithoutSessionInput[] | SessionAnalyticUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionAnalyticCreateOrConnectWithoutSessionInput | SessionAnalyticCreateOrConnectWithoutSessionInput[]
    createMany?: SessionAnalyticCreateManySessionInputEnvelope
    connect?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
  }

  export type IdentityVerificationCreateNestedManyWithoutSessionInput = {
    create?: XOR<IdentityVerificationCreateWithoutSessionInput, IdentityVerificationUncheckedCreateWithoutSessionInput> | IdentityVerificationCreateWithoutSessionInput[] | IdentityVerificationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: IdentityVerificationCreateOrConnectWithoutSessionInput | IdentityVerificationCreateOrConnectWithoutSessionInput[]
    createMany?: IdentityVerificationCreateManySessionInputEnvelope
    connect?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
  }

  export type PlagiarismReportCreateNestedManyWithoutSessionInput = {
    create?: XOR<PlagiarismReportCreateWithoutSessionInput, PlagiarismReportUncheckedCreateWithoutSessionInput> | PlagiarismReportCreateWithoutSessionInput[] | PlagiarismReportUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlagiarismReportCreateOrConnectWithoutSessionInput | PlagiarismReportCreateOrConnectWithoutSessionInput[]
    createMany?: PlagiarismReportCreateManySessionInputEnvelope
    connect?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
  }

  export type AdminInterventionCreateNestedManyWithoutSessionInput = {
    create?: XOR<AdminInterventionCreateWithoutSessionInput, AdminInterventionUncheckedCreateWithoutSessionInput> | AdminInterventionCreateWithoutSessionInput[] | AdminInterventionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AdminInterventionCreateOrConnectWithoutSessionInput | AdminInterventionCreateOrConnectWithoutSessionInput[]
    createMany?: AdminInterventionCreateManySessionInputEnvelope
    connect?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
  }

  export type ViolationUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ViolationCreateWithoutSessionInput, ViolationUncheckedCreateWithoutSessionInput> | ViolationCreateWithoutSessionInput[] | ViolationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutSessionInput | ViolationCreateOrConnectWithoutSessionInput[]
    createMany?: ViolationCreateManySessionInputEnvelope
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
  }

  export type SessionAnalyticUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SessionAnalyticCreateWithoutSessionInput, SessionAnalyticUncheckedCreateWithoutSessionInput> | SessionAnalyticCreateWithoutSessionInput[] | SessionAnalyticUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionAnalyticCreateOrConnectWithoutSessionInput | SessionAnalyticCreateOrConnectWithoutSessionInput[]
    createMany?: SessionAnalyticCreateManySessionInputEnvelope
    connect?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
  }

  export type IdentityVerificationUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<IdentityVerificationCreateWithoutSessionInput, IdentityVerificationUncheckedCreateWithoutSessionInput> | IdentityVerificationCreateWithoutSessionInput[] | IdentityVerificationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: IdentityVerificationCreateOrConnectWithoutSessionInput | IdentityVerificationCreateOrConnectWithoutSessionInput[]
    createMany?: IdentityVerificationCreateManySessionInputEnvelope
    connect?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
  }

  export type PlagiarismReportUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<PlagiarismReportCreateWithoutSessionInput, PlagiarismReportUncheckedCreateWithoutSessionInput> | PlagiarismReportCreateWithoutSessionInput[] | PlagiarismReportUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlagiarismReportCreateOrConnectWithoutSessionInput | PlagiarismReportCreateOrConnectWithoutSessionInput[]
    createMany?: PlagiarismReportCreateManySessionInputEnvelope
    connect?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
  }

  export type AdminInterventionUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<AdminInterventionCreateWithoutSessionInput, AdminInterventionUncheckedCreateWithoutSessionInput> | AdminInterventionCreateWithoutSessionInput[] | AdminInterventionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AdminInterventionCreateOrConnectWithoutSessionInput | AdminInterventionCreateOrConnectWithoutSessionInput[]
    createMany?: AdminInterventionCreateManySessionInputEnvelope
    connect?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ViolationUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ViolationCreateWithoutSessionInput, ViolationUncheckedCreateWithoutSessionInput> | ViolationCreateWithoutSessionInput[] | ViolationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutSessionInput | ViolationCreateOrConnectWithoutSessionInput[]
    upsert?: ViolationUpsertWithWhereUniqueWithoutSessionInput | ViolationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ViolationCreateManySessionInputEnvelope
    set?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    disconnect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    delete?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    update?: ViolationUpdateWithWhereUniqueWithoutSessionInput | ViolationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ViolationUpdateManyWithWhereWithoutSessionInput | ViolationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
  }

  export type SessionAnalyticUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionAnalyticCreateWithoutSessionInput, SessionAnalyticUncheckedCreateWithoutSessionInput> | SessionAnalyticCreateWithoutSessionInput[] | SessionAnalyticUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionAnalyticCreateOrConnectWithoutSessionInput | SessionAnalyticCreateOrConnectWithoutSessionInput[]
    upsert?: SessionAnalyticUpsertWithWhereUniqueWithoutSessionInput | SessionAnalyticUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionAnalyticCreateManySessionInputEnvelope
    set?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    disconnect?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    delete?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    connect?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    update?: SessionAnalyticUpdateWithWhereUniqueWithoutSessionInput | SessionAnalyticUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionAnalyticUpdateManyWithWhereWithoutSessionInput | SessionAnalyticUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionAnalyticScalarWhereInput | SessionAnalyticScalarWhereInput[]
  }

  export type IdentityVerificationUpdateManyWithoutSessionNestedInput = {
    create?: XOR<IdentityVerificationCreateWithoutSessionInput, IdentityVerificationUncheckedCreateWithoutSessionInput> | IdentityVerificationCreateWithoutSessionInput[] | IdentityVerificationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: IdentityVerificationCreateOrConnectWithoutSessionInput | IdentityVerificationCreateOrConnectWithoutSessionInput[]
    upsert?: IdentityVerificationUpsertWithWhereUniqueWithoutSessionInput | IdentityVerificationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: IdentityVerificationCreateManySessionInputEnvelope
    set?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    disconnect?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    delete?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    connect?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    update?: IdentityVerificationUpdateWithWhereUniqueWithoutSessionInput | IdentityVerificationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: IdentityVerificationUpdateManyWithWhereWithoutSessionInput | IdentityVerificationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: IdentityVerificationScalarWhereInput | IdentityVerificationScalarWhereInput[]
  }

  export type PlagiarismReportUpdateManyWithoutSessionNestedInput = {
    create?: XOR<PlagiarismReportCreateWithoutSessionInput, PlagiarismReportUncheckedCreateWithoutSessionInput> | PlagiarismReportCreateWithoutSessionInput[] | PlagiarismReportUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlagiarismReportCreateOrConnectWithoutSessionInput | PlagiarismReportCreateOrConnectWithoutSessionInput[]
    upsert?: PlagiarismReportUpsertWithWhereUniqueWithoutSessionInput | PlagiarismReportUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: PlagiarismReportCreateManySessionInputEnvelope
    set?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    disconnect?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    delete?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    connect?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    update?: PlagiarismReportUpdateWithWhereUniqueWithoutSessionInput | PlagiarismReportUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: PlagiarismReportUpdateManyWithWhereWithoutSessionInput | PlagiarismReportUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: PlagiarismReportScalarWhereInput | PlagiarismReportScalarWhereInput[]
  }

  export type AdminInterventionUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AdminInterventionCreateWithoutSessionInput, AdminInterventionUncheckedCreateWithoutSessionInput> | AdminInterventionCreateWithoutSessionInput[] | AdminInterventionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AdminInterventionCreateOrConnectWithoutSessionInput | AdminInterventionCreateOrConnectWithoutSessionInput[]
    upsert?: AdminInterventionUpsertWithWhereUniqueWithoutSessionInput | AdminInterventionUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AdminInterventionCreateManySessionInputEnvelope
    set?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    disconnect?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    delete?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    connect?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    update?: AdminInterventionUpdateWithWhereUniqueWithoutSessionInput | AdminInterventionUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AdminInterventionUpdateManyWithWhereWithoutSessionInput | AdminInterventionUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AdminInterventionScalarWhereInput | AdminInterventionScalarWhereInput[]
  }

  export type ViolationUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ViolationCreateWithoutSessionInput, ViolationUncheckedCreateWithoutSessionInput> | ViolationCreateWithoutSessionInput[] | ViolationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ViolationCreateOrConnectWithoutSessionInput | ViolationCreateOrConnectWithoutSessionInput[]
    upsert?: ViolationUpsertWithWhereUniqueWithoutSessionInput | ViolationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ViolationCreateManySessionInputEnvelope
    set?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    disconnect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    delete?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    connect?: ViolationWhereUniqueInput | ViolationWhereUniqueInput[]
    update?: ViolationUpdateWithWhereUniqueWithoutSessionInput | ViolationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ViolationUpdateManyWithWhereWithoutSessionInput | ViolationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
  }

  export type SessionAnalyticUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SessionAnalyticCreateWithoutSessionInput, SessionAnalyticUncheckedCreateWithoutSessionInput> | SessionAnalyticCreateWithoutSessionInput[] | SessionAnalyticUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SessionAnalyticCreateOrConnectWithoutSessionInput | SessionAnalyticCreateOrConnectWithoutSessionInput[]
    upsert?: SessionAnalyticUpsertWithWhereUniqueWithoutSessionInput | SessionAnalyticUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SessionAnalyticCreateManySessionInputEnvelope
    set?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    disconnect?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    delete?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    connect?: SessionAnalyticWhereUniqueInput | SessionAnalyticWhereUniqueInput[]
    update?: SessionAnalyticUpdateWithWhereUniqueWithoutSessionInput | SessionAnalyticUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SessionAnalyticUpdateManyWithWhereWithoutSessionInput | SessionAnalyticUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SessionAnalyticScalarWhereInput | SessionAnalyticScalarWhereInput[]
  }

  export type IdentityVerificationUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<IdentityVerificationCreateWithoutSessionInput, IdentityVerificationUncheckedCreateWithoutSessionInput> | IdentityVerificationCreateWithoutSessionInput[] | IdentityVerificationUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: IdentityVerificationCreateOrConnectWithoutSessionInput | IdentityVerificationCreateOrConnectWithoutSessionInput[]
    upsert?: IdentityVerificationUpsertWithWhereUniqueWithoutSessionInput | IdentityVerificationUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: IdentityVerificationCreateManySessionInputEnvelope
    set?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    disconnect?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    delete?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    connect?: IdentityVerificationWhereUniqueInput | IdentityVerificationWhereUniqueInput[]
    update?: IdentityVerificationUpdateWithWhereUniqueWithoutSessionInput | IdentityVerificationUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: IdentityVerificationUpdateManyWithWhereWithoutSessionInput | IdentityVerificationUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: IdentityVerificationScalarWhereInput | IdentityVerificationScalarWhereInput[]
  }

  export type PlagiarismReportUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<PlagiarismReportCreateWithoutSessionInput, PlagiarismReportUncheckedCreateWithoutSessionInput> | PlagiarismReportCreateWithoutSessionInput[] | PlagiarismReportUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: PlagiarismReportCreateOrConnectWithoutSessionInput | PlagiarismReportCreateOrConnectWithoutSessionInput[]
    upsert?: PlagiarismReportUpsertWithWhereUniqueWithoutSessionInput | PlagiarismReportUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: PlagiarismReportCreateManySessionInputEnvelope
    set?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    disconnect?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    delete?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    connect?: PlagiarismReportWhereUniqueInput | PlagiarismReportWhereUniqueInput[]
    update?: PlagiarismReportUpdateWithWhereUniqueWithoutSessionInput | PlagiarismReportUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: PlagiarismReportUpdateManyWithWhereWithoutSessionInput | PlagiarismReportUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: PlagiarismReportScalarWhereInput | PlagiarismReportScalarWhereInput[]
  }

  export type AdminInterventionUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<AdminInterventionCreateWithoutSessionInput, AdminInterventionUncheckedCreateWithoutSessionInput> | AdminInterventionCreateWithoutSessionInput[] | AdminInterventionUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: AdminInterventionCreateOrConnectWithoutSessionInput | AdminInterventionCreateOrConnectWithoutSessionInput[]
    upsert?: AdminInterventionUpsertWithWhereUniqueWithoutSessionInput | AdminInterventionUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: AdminInterventionCreateManySessionInputEnvelope
    set?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    disconnect?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    delete?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    connect?: AdminInterventionWhereUniqueInput | AdminInterventionWhereUniqueInput[]
    update?: AdminInterventionUpdateWithWhereUniqueWithoutSessionInput | AdminInterventionUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: AdminInterventionUpdateManyWithWhereWithoutSessionInput | AdminInterventionUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: AdminInterventionScalarWhereInput | AdminInterventionScalarWhereInput[]
  }

  export type ProctoringSessionCreateNestedOneWithoutViolationsInput = {
    create?: XOR<ProctoringSessionCreateWithoutViolationsInput, ProctoringSessionUncheckedCreateWithoutViolationsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutViolationsInput
    connect?: ProctoringSessionWhereUniqueInput
  }

  export type ProctoringSessionUpdateOneRequiredWithoutViolationsNestedInput = {
    create?: XOR<ProctoringSessionCreateWithoutViolationsInput, ProctoringSessionUncheckedCreateWithoutViolationsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutViolationsInput
    upsert?: ProctoringSessionUpsertWithoutViolationsInput
    connect?: ProctoringSessionWhereUniqueInput
    update?: XOR<XOR<ProctoringSessionUpdateToOneWithWhereWithoutViolationsInput, ProctoringSessionUpdateWithoutViolationsInput>, ProctoringSessionUncheckedUpdateWithoutViolationsInput>
  }

  export type ProctoringSessionCreateNestedOneWithoutAnalyticsInput = {
    create?: XOR<ProctoringSessionCreateWithoutAnalyticsInput, ProctoringSessionUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutAnalyticsInput
    connect?: ProctoringSessionWhereUniqueInput
  }

  export type ProctoringSessionUpdateOneRequiredWithoutAnalyticsNestedInput = {
    create?: XOR<ProctoringSessionCreateWithoutAnalyticsInput, ProctoringSessionUncheckedCreateWithoutAnalyticsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutAnalyticsInput
    upsert?: ProctoringSessionUpsertWithoutAnalyticsInput
    connect?: ProctoringSessionWhereUniqueInput
    update?: XOR<XOR<ProctoringSessionUpdateToOneWithWhereWithoutAnalyticsInput, ProctoringSessionUpdateWithoutAnalyticsInput>, ProctoringSessionUncheckedUpdateWithoutAnalyticsInput>
  }

  export type ProctoringSessionCreateNestedOneWithoutIdentityVerificationsInput = {
    create?: XOR<ProctoringSessionCreateWithoutIdentityVerificationsInput, ProctoringSessionUncheckedCreateWithoutIdentityVerificationsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutIdentityVerificationsInput
    connect?: ProctoringSessionWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProctoringSessionUpdateOneRequiredWithoutIdentityVerificationsNestedInput = {
    create?: XOR<ProctoringSessionCreateWithoutIdentityVerificationsInput, ProctoringSessionUncheckedCreateWithoutIdentityVerificationsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutIdentityVerificationsInput
    upsert?: ProctoringSessionUpsertWithoutIdentityVerificationsInput
    connect?: ProctoringSessionWhereUniqueInput
    update?: XOR<XOR<ProctoringSessionUpdateToOneWithWhereWithoutIdentityVerificationsInput, ProctoringSessionUpdateWithoutIdentityVerificationsInput>, ProctoringSessionUncheckedUpdateWithoutIdentityVerificationsInput>
  }

  export type ProctoringSessionCreateNestedOneWithoutPlagiarismReportsInput = {
    create?: XOR<ProctoringSessionCreateWithoutPlagiarismReportsInput, ProctoringSessionUncheckedCreateWithoutPlagiarismReportsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutPlagiarismReportsInput
    connect?: ProctoringSessionWhereUniqueInput
  }

  export type ProctoringSessionUpdateOneRequiredWithoutPlagiarismReportsNestedInput = {
    create?: XOR<ProctoringSessionCreateWithoutPlagiarismReportsInput, ProctoringSessionUncheckedCreateWithoutPlagiarismReportsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutPlagiarismReportsInput
    upsert?: ProctoringSessionUpsertWithoutPlagiarismReportsInput
    connect?: ProctoringSessionWhereUniqueInput
    update?: XOR<XOR<ProctoringSessionUpdateToOneWithWhereWithoutPlagiarismReportsInput, ProctoringSessionUpdateWithoutPlagiarismReportsInput>, ProctoringSessionUncheckedUpdateWithoutPlagiarismReportsInput>
  }

  export type ProctoringSessionCreateNestedOneWithoutAdminInterventionsInput = {
    create?: XOR<ProctoringSessionCreateWithoutAdminInterventionsInput, ProctoringSessionUncheckedCreateWithoutAdminInterventionsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutAdminInterventionsInput
    connect?: ProctoringSessionWhereUniqueInput
  }

  export type ProctoringSessionUpdateOneRequiredWithoutAdminInterventionsNestedInput = {
    create?: XOR<ProctoringSessionCreateWithoutAdminInterventionsInput, ProctoringSessionUncheckedCreateWithoutAdminInterventionsInput>
    connectOrCreate?: ProctoringSessionCreateOrConnectWithoutAdminInterventionsInput
    upsert?: ProctoringSessionUpsertWithoutAdminInterventionsInput
    connect?: ProctoringSessionWhereUniqueInput
    update?: XOR<XOR<ProctoringSessionUpdateToOneWithWhereWithoutAdminInterventionsInput, ProctoringSessionUpdateWithoutAdminInterventionsInput>, ProctoringSessionUncheckedUpdateWithoutAdminInterventionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type ViolationCreateWithoutSessionInput = {
    id?: string
    type: string
    description?: string | null
    confidence?: number
    severity?: string
    screenshotUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: Date | string
    processed?: boolean
    actionTaken?: string | null
  }

  export type ViolationUncheckedCreateWithoutSessionInput = {
    id?: string
    type: string
    description?: string | null
    confidence?: number
    severity?: string
    screenshotUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: Date | string
    processed?: boolean
    actionTaken?: string | null
  }

  export type ViolationCreateOrConnectWithoutSessionInput = {
    where: ViolationWhereUniqueInput
    create: XOR<ViolationCreateWithoutSessionInput, ViolationUncheckedCreateWithoutSessionInput>
  }

  export type ViolationCreateManySessionInputEnvelope = {
    data: ViolationCreateManySessionInput | ViolationCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type SessionAnalyticCreateWithoutSessionInput = {
    id?: string
    eventType: string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: number
    keystrokeCount?: number
    focusLossCount?: number
    tabSwitches?: number
    windowBlurCount?: number
    recordedAt?: Date | string
  }

  export type SessionAnalyticUncheckedCreateWithoutSessionInput = {
    id?: string
    eventType: string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: number
    keystrokeCount?: number
    focusLossCount?: number
    tabSwitches?: number
    windowBlurCount?: number
    recordedAt?: Date | string
  }

  export type SessionAnalyticCreateOrConnectWithoutSessionInput = {
    where: SessionAnalyticWhereUniqueInput
    create: XOR<SessionAnalyticCreateWithoutSessionInput, SessionAnalyticUncheckedCreateWithoutSessionInput>
  }

  export type SessionAnalyticCreateManySessionInputEnvelope = {
    data: SessionAnalyticCreateManySessionInput | SessionAnalyticCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type IdentityVerificationCreateWithoutSessionInput = {
    id?: string
    verificationType: string
    referenceImageUrl?: string | null
    verificationImageUrl?: string | null
    confidenceScore?: number | null
    verificationResult?: string | null
    failureReason?: string | null
    verifiedAt?: Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationUncheckedCreateWithoutSessionInput = {
    id?: string
    verificationType: string
    referenceImageUrl?: string | null
    verificationImageUrl?: string | null
    confidenceScore?: number | null
    verificationResult?: string | null
    failureReason?: string | null
    verifiedAt?: Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationCreateOrConnectWithoutSessionInput = {
    where: IdentityVerificationWhereUniqueInput
    create: XOR<IdentityVerificationCreateWithoutSessionInput, IdentityVerificationUncheckedCreateWithoutSessionInput>
  }

  export type IdentityVerificationCreateManySessionInputEnvelope = {
    data: IdentityVerificationCreateManySessionInput | IdentityVerificationCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type PlagiarismReportCreateWithoutSessionInput = {
    id?: string
    submissionId?: string | null
    language?: string | null
    similarityScore?: number | null
    matchesFound?: number
    reportUrl?: string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: Date | string
    status?: string
  }

  export type PlagiarismReportUncheckedCreateWithoutSessionInput = {
    id?: string
    submissionId?: string | null
    language?: string | null
    similarityScore?: number | null
    matchesFound?: number
    reportUrl?: string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: Date | string
    status?: string
  }

  export type PlagiarismReportCreateOrConnectWithoutSessionInput = {
    where: PlagiarismReportWhereUniqueInput
    create: XOR<PlagiarismReportCreateWithoutSessionInput, PlagiarismReportUncheckedCreateWithoutSessionInput>
  }

  export type PlagiarismReportCreateManySessionInputEnvelope = {
    data: PlagiarismReportCreateManySessionInput | PlagiarismReportCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type AdminInterventionCreateWithoutSessionInput = {
    id?: string
    adminId: bigint | number
    interventionType: string
    message?: string | null
    actionTaken?: string | null
    createdAt?: Date | string
    resolved?: boolean
    resolutionNotes?: string | null
  }

  export type AdminInterventionUncheckedCreateWithoutSessionInput = {
    id?: string
    adminId: bigint | number
    interventionType: string
    message?: string | null
    actionTaken?: string | null
    createdAt?: Date | string
    resolved?: boolean
    resolutionNotes?: string | null
  }

  export type AdminInterventionCreateOrConnectWithoutSessionInput = {
    where: AdminInterventionWhereUniqueInput
    create: XOR<AdminInterventionCreateWithoutSessionInput, AdminInterventionUncheckedCreateWithoutSessionInput>
  }

  export type AdminInterventionCreateManySessionInputEnvelope = {
    data: AdminInterventionCreateManySessionInput | AdminInterventionCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ViolationUpsertWithWhereUniqueWithoutSessionInput = {
    where: ViolationWhereUniqueInput
    update: XOR<ViolationUpdateWithoutSessionInput, ViolationUncheckedUpdateWithoutSessionInput>
    create: XOR<ViolationCreateWithoutSessionInput, ViolationUncheckedCreateWithoutSessionInput>
  }

  export type ViolationUpdateWithWhereUniqueWithoutSessionInput = {
    where: ViolationWhereUniqueInput
    data: XOR<ViolationUpdateWithoutSessionInput, ViolationUncheckedUpdateWithoutSessionInput>
  }

  export type ViolationUpdateManyWithWhereWithoutSessionInput = {
    where: ViolationScalarWhereInput
    data: XOR<ViolationUpdateManyMutationInput, ViolationUncheckedUpdateManyWithoutSessionInput>
  }

  export type ViolationScalarWhereInput = {
    AND?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
    OR?: ViolationScalarWhereInput[]
    NOT?: ViolationScalarWhereInput | ViolationScalarWhereInput[]
    id?: StringFilter<"Violation"> | string
    sessionId?: StringFilter<"Violation"> | string
    type?: StringFilter<"Violation"> | string
    description?: StringNullableFilter<"Violation"> | string | null
    confidence?: FloatFilter<"Violation"> | number
    severity?: StringFilter<"Violation"> | string
    screenshotUrl?: StringNullableFilter<"Violation"> | string | null
    metadata?: JsonNullableFilter<"Violation">
    detectedAt?: DateTimeFilter<"Violation"> | Date | string
    processed?: BoolFilter<"Violation"> | boolean
    actionTaken?: StringNullableFilter<"Violation"> | string | null
  }

  export type SessionAnalyticUpsertWithWhereUniqueWithoutSessionInput = {
    where: SessionAnalyticWhereUniqueInput
    update: XOR<SessionAnalyticUpdateWithoutSessionInput, SessionAnalyticUncheckedUpdateWithoutSessionInput>
    create: XOR<SessionAnalyticCreateWithoutSessionInput, SessionAnalyticUncheckedCreateWithoutSessionInput>
  }

  export type SessionAnalyticUpdateWithWhereUniqueWithoutSessionInput = {
    where: SessionAnalyticWhereUniqueInput
    data: XOR<SessionAnalyticUpdateWithoutSessionInput, SessionAnalyticUncheckedUpdateWithoutSessionInput>
  }

  export type SessionAnalyticUpdateManyWithWhereWithoutSessionInput = {
    where: SessionAnalyticScalarWhereInput
    data: XOR<SessionAnalyticUpdateManyMutationInput, SessionAnalyticUncheckedUpdateManyWithoutSessionInput>
  }

  export type SessionAnalyticScalarWhereInput = {
    AND?: SessionAnalyticScalarWhereInput | SessionAnalyticScalarWhereInput[]
    OR?: SessionAnalyticScalarWhereInput[]
    NOT?: SessionAnalyticScalarWhereInput | SessionAnalyticScalarWhereInput[]
    id?: StringFilter<"SessionAnalytic"> | string
    sessionId?: StringFilter<"SessionAnalytic"> | string
    eventType?: StringFilter<"SessionAnalytic"> | string
    eventData?: JsonNullableFilter<"SessionAnalytic">
    mouseMovements?: IntFilter<"SessionAnalytic"> | number
    keystrokeCount?: IntFilter<"SessionAnalytic"> | number
    focusLossCount?: IntFilter<"SessionAnalytic"> | number
    tabSwitches?: IntFilter<"SessionAnalytic"> | number
    windowBlurCount?: IntFilter<"SessionAnalytic"> | number
    recordedAt?: DateTimeFilter<"SessionAnalytic"> | Date | string
  }

  export type IdentityVerificationUpsertWithWhereUniqueWithoutSessionInput = {
    where: IdentityVerificationWhereUniqueInput
    update: XOR<IdentityVerificationUpdateWithoutSessionInput, IdentityVerificationUncheckedUpdateWithoutSessionInput>
    create: XOR<IdentityVerificationCreateWithoutSessionInput, IdentityVerificationUncheckedCreateWithoutSessionInput>
  }

  export type IdentityVerificationUpdateWithWhereUniqueWithoutSessionInput = {
    where: IdentityVerificationWhereUniqueInput
    data: XOR<IdentityVerificationUpdateWithoutSessionInput, IdentityVerificationUncheckedUpdateWithoutSessionInput>
  }

  export type IdentityVerificationUpdateManyWithWhereWithoutSessionInput = {
    where: IdentityVerificationScalarWhereInput
    data: XOR<IdentityVerificationUpdateManyMutationInput, IdentityVerificationUncheckedUpdateManyWithoutSessionInput>
  }

  export type IdentityVerificationScalarWhereInput = {
    AND?: IdentityVerificationScalarWhereInput | IdentityVerificationScalarWhereInput[]
    OR?: IdentityVerificationScalarWhereInput[]
    NOT?: IdentityVerificationScalarWhereInput | IdentityVerificationScalarWhereInput[]
    id?: StringFilter<"IdentityVerification"> | string
    sessionId?: StringFilter<"IdentityVerification"> | string
    verificationType?: StringFilter<"IdentityVerification"> | string
    referenceImageUrl?: StringNullableFilter<"IdentityVerification"> | string | null
    verificationImageUrl?: StringNullableFilter<"IdentityVerification"> | string | null
    confidenceScore?: FloatNullableFilter<"IdentityVerification"> | number | null
    verificationResult?: StringNullableFilter<"IdentityVerification"> | string | null
    failureReason?: StringNullableFilter<"IdentityVerification"> | string | null
    verifiedAt?: DateTimeFilter<"IdentityVerification"> | Date | string
    biometricData?: JsonNullableFilter<"IdentityVerification">
  }

  export type PlagiarismReportUpsertWithWhereUniqueWithoutSessionInput = {
    where: PlagiarismReportWhereUniqueInput
    update: XOR<PlagiarismReportUpdateWithoutSessionInput, PlagiarismReportUncheckedUpdateWithoutSessionInput>
    create: XOR<PlagiarismReportCreateWithoutSessionInput, PlagiarismReportUncheckedCreateWithoutSessionInput>
  }

  export type PlagiarismReportUpdateWithWhereUniqueWithoutSessionInput = {
    where: PlagiarismReportWhereUniqueInput
    data: XOR<PlagiarismReportUpdateWithoutSessionInput, PlagiarismReportUncheckedUpdateWithoutSessionInput>
  }

  export type PlagiarismReportUpdateManyWithWhereWithoutSessionInput = {
    where: PlagiarismReportScalarWhereInput
    data: XOR<PlagiarismReportUpdateManyMutationInput, PlagiarismReportUncheckedUpdateManyWithoutSessionInput>
  }

  export type PlagiarismReportScalarWhereInput = {
    AND?: PlagiarismReportScalarWhereInput | PlagiarismReportScalarWhereInput[]
    OR?: PlagiarismReportScalarWhereInput[]
    NOT?: PlagiarismReportScalarWhereInput | PlagiarismReportScalarWhereInput[]
    id?: StringFilter<"PlagiarismReport"> | string
    sessionId?: StringFilter<"PlagiarismReport"> | string
    submissionId?: StringNullableFilter<"PlagiarismReport"> | string | null
    language?: StringNullableFilter<"PlagiarismReport"> | string | null
    similarityScore?: FloatNullableFilter<"PlagiarismReport"> | number | null
    matchesFound?: IntFilter<"PlagiarismReport"> | number
    reportUrl?: StringNullableFilter<"PlagiarismReport"> | string | null
    reportData?: JsonNullableFilter<"PlagiarismReport">
    generatedAt?: DateTimeFilter<"PlagiarismReport"> | Date | string
    status?: StringFilter<"PlagiarismReport"> | string
  }

  export type AdminInterventionUpsertWithWhereUniqueWithoutSessionInput = {
    where: AdminInterventionWhereUniqueInput
    update: XOR<AdminInterventionUpdateWithoutSessionInput, AdminInterventionUncheckedUpdateWithoutSessionInput>
    create: XOR<AdminInterventionCreateWithoutSessionInput, AdminInterventionUncheckedCreateWithoutSessionInput>
  }

  export type AdminInterventionUpdateWithWhereUniqueWithoutSessionInput = {
    where: AdminInterventionWhereUniqueInput
    data: XOR<AdminInterventionUpdateWithoutSessionInput, AdminInterventionUncheckedUpdateWithoutSessionInput>
  }

  export type AdminInterventionUpdateManyWithWhereWithoutSessionInput = {
    where: AdminInterventionScalarWhereInput
    data: XOR<AdminInterventionUpdateManyMutationInput, AdminInterventionUncheckedUpdateManyWithoutSessionInput>
  }

  export type AdminInterventionScalarWhereInput = {
    AND?: AdminInterventionScalarWhereInput | AdminInterventionScalarWhereInput[]
    OR?: AdminInterventionScalarWhereInput[]
    NOT?: AdminInterventionScalarWhereInput | AdminInterventionScalarWhereInput[]
    id?: StringFilter<"AdminIntervention"> | string
    sessionId?: StringFilter<"AdminIntervention"> | string
    adminId?: BigIntFilter<"AdminIntervention"> | bigint | number
    interventionType?: StringFilter<"AdminIntervention"> | string
    message?: StringNullableFilter<"AdminIntervention"> | string | null
    actionTaken?: StringNullableFilter<"AdminIntervention"> | string | null
    createdAt?: DateTimeFilter<"AdminIntervention"> | Date | string
    resolved?: BoolFilter<"AdminIntervention"> | boolean
    resolutionNotes?: StringNullableFilter<"AdminIntervention"> | string | null
  }

  export type ProctoringSessionCreateWithoutViolationsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    analytics?: SessionAnalyticCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUncheckedCreateWithoutViolationsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    analytics?: SessionAnalyticUncheckedCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationUncheckedCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportUncheckedCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionCreateOrConnectWithoutViolationsInput = {
    where: ProctoringSessionWhereUniqueInput
    create: XOR<ProctoringSessionCreateWithoutViolationsInput, ProctoringSessionUncheckedCreateWithoutViolationsInput>
  }

  export type ProctoringSessionUpsertWithoutViolationsInput = {
    update: XOR<ProctoringSessionUpdateWithoutViolationsInput, ProctoringSessionUncheckedUpdateWithoutViolationsInput>
    create: XOR<ProctoringSessionCreateWithoutViolationsInput, ProctoringSessionUncheckedCreateWithoutViolationsInput>
    where?: ProctoringSessionWhereInput
  }

  export type ProctoringSessionUpdateToOneWithWhereWithoutViolationsInput = {
    where?: ProctoringSessionWhereInput
    data: XOR<ProctoringSessionUpdateWithoutViolationsInput, ProctoringSessionUncheckedUpdateWithoutViolationsInput>
  }

  export type ProctoringSessionUpdateWithoutViolationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analytics?: SessionAnalyticUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionUncheckedUpdateWithoutViolationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    analytics?: SessionAnalyticUncheckedUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUncheckedUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUncheckedUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionCreateWithoutAnalyticsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUncheckedCreateWithoutAnalyticsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationUncheckedCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationUncheckedCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportUncheckedCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionCreateOrConnectWithoutAnalyticsInput = {
    where: ProctoringSessionWhereUniqueInput
    create: XOR<ProctoringSessionCreateWithoutAnalyticsInput, ProctoringSessionUncheckedCreateWithoutAnalyticsInput>
  }

  export type ProctoringSessionUpsertWithoutAnalyticsInput = {
    update: XOR<ProctoringSessionUpdateWithoutAnalyticsInput, ProctoringSessionUncheckedUpdateWithoutAnalyticsInput>
    create: XOR<ProctoringSessionCreateWithoutAnalyticsInput, ProctoringSessionUncheckedCreateWithoutAnalyticsInput>
    where?: ProctoringSessionWhereInput
  }

  export type ProctoringSessionUpdateToOneWithWhereWithoutAnalyticsInput = {
    where?: ProctoringSessionWhereInput
    data: XOR<ProctoringSessionUpdateWithoutAnalyticsInput, ProctoringSessionUncheckedUpdateWithoutAnalyticsInput>
  }

  export type ProctoringSessionUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionUncheckedUpdateWithoutAnalyticsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUncheckedUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUncheckedUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUncheckedUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionCreateWithoutIdentityVerificationsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUncheckedCreateWithoutIdentityVerificationsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationUncheckedCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticUncheckedCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportUncheckedCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionCreateOrConnectWithoutIdentityVerificationsInput = {
    where: ProctoringSessionWhereUniqueInput
    create: XOR<ProctoringSessionCreateWithoutIdentityVerificationsInput, ProctoringSessionUncheckedCreateWithoutIdentityVerificationsInput>
  }

  export type ProctoringSessionUpsertWithoutIdentityVerificationsInput = {
    update: XOR<ProctoringSessionUpdateWithoutIdentityVerificationsInput, ProctoringSessionUncheckedUpdateWithoutIdentityVerificationsInput>
    create: XOR<ProctoringSessionCreateWithoutIdentityVerificationsInput, ProctoringSessionUncheckedCreateWithoutIdentityVerificationsInput>
    where?: ProctoringSessionWhereInput
  }

  export type ProctoringSessionUpdateToOneWithWhereWithoutIdentityVerificationsInput = {
    where?: ProctoringSessionWhereInput
    data: XOR<ProctoringSessionUpdateWithoutIdentityVerificationsInput, ProctoringSessionUncheckedUpdateWithoutIdentityVerificationsInput>
  }

  export type ProctoringSessionUpdateWithoutIdentityVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionUncheckedUpdateWithoutIdentityVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUncheckedUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUncheckedUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUncheckedUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionCreateWithoutPlagiarismReportsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUncheckedCreateWithoutPlagiarismReportsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationUncheckedCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticUncheckedCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationUncheckedCreateNestedManyWithoutSessionInput
    adminInterventions?: AdminInterventionUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionCreateOrConnectWithoutPlagiarismReportsInput = {
    where: ProctoringSessionWhereUniqueInput
    create: XOR<ProctoringSessionCreateWithoutPlagiarismReportsInput, ProctoringSessionUncheckedCreateWithoutPlagiarismReportsInput>
  }

  export type ProctoringSessionUpsertWithoutPlagiarismReportsInput = {
    update: XOR<ProctoringSessionUpdateWithoutPlagiarismReportsInput, ProctoringSessionUncheckedUpdateWithoutPlagiarismReportsInput>
    create: XOR<ProctoringSessionCreateWithoutPlagiarismReportsInput, ProctoringSessionUncheckedCreateWithoutPlagiarismReportsInput>
    where?: ProctoringSessionWhereInput
  }

  export type ProctoringSessionUpdateToOneWithWhereWithoutPlagiarismReportsInput = {
    where?: ProctoringSessionWhereInput
    data: XOR<ProctoringSessionUpdateWithoutPlagiarismReportsInput, ProctoringSessionUncheckedUpdateWithoutPlagiarismReportsInput>
  }

  export type ProctoringSessionUpdateWithoutPlagiarismReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionUncheckedUpdateWithoutPlagiarismReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUncheckedUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUncheckedUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUncheckedUpdateManyWithoutSessionNestedInput
    adminInterventions?: AdminInterventionUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionCreateWithoutAdminInterventionsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionUncheckedCreateWithoutAdminInterventionsInput = {
    id?: string
    userId: bigint | number
    quizId: bigint | number
    sessionToken: string
    startTime?: Date | string
    endTime?: Date | string | null
    status?: string
    riskScore?: number
    violationsCount?: number
    identityVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    browserFingerprint?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    violations?: ViolationUncheckedCreateNestedManyWithoutSessionInput
    analytics?: SessionAnalyticUncheckedCreateNestedManyWithoutSessionInput
    identityVerifications?: IdentityVerificationUncheckedCreateNestedManyWithoutSessionInput
    plagiarismReports?: PlagiarismReportUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ProctoringSessionCreateOrConnectWithoutAdminInterventionsInput = {
    where: ProctoringSessionWhereUniqueInput
    create: XOR<ProctoringSessionCreateWithoutAdminInterventionsInput, ProctoringSessionUncheckedCreateWithoutAdminInterventionsInput>
  }

  export type ProctoringSessionUpsertWithoutAdminInterventionsInput = {
    update: XOR<ProctoringSessionUpdateWithoutAdminInterventionsInput, ProctoringSessionUncheckedUpdateWithoutAdminInterventionsInput>
    create: XOR<ProctoringSessionCreateWithoutAdminInterventionsInput, ProctoringSessionUncheckedCreateWithoutAdminInterventionsInput>
    where?: ProctoringSessionWhereInput
  }

  export type ProctoringSessionUpdateToOneWithWhereWithoutAdminInterventionsInput = {
    where?: ProctoringSessionWhereInput
    data: XOR<ProctoringSessionUpdateWithoutAdminInterventionsInput, ProctoringSessionUncheckedUpdateWithoutAdminInterventionsInput>
  }

  export type ProctoringSessionUpdateWithoutAdminInterventionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUpdateManyWithoutSessionNestedInput
  }

  export type ProctoringSessionUncheckedUpdateWithoutAdminInterventionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: BigIntFieldUpdateOperationsInput | bigint | number
    quizId?: BigIntFieldUpdateOperationsInput | bigint | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    violationsCount?: IntFieldUpdateOperationsInput | number
    identityVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    browserFingerprint?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    violations?: ViolationUncheckedUpdateManyWithoutSessionNestedInput
    analytics?: SessionAnalyticUncheckedUpdateManyWithoutSessionNestedInput
    identityVerifications?: IdentityVerificationUncheckedUpdateManyWithoutSessionNestedInput
    plagiarismReports?: PlagiarismReportUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ViolationCreateManySessionInput = {
    id?: string
    type: string
    description?: string | null
    confidence?: number
    severity?: string
    screenshotUrl?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: Date | string
    processed?: boolean
    actionTaken?: string | null
  }

  export type SessionAnalyticCreateManySessionInput = {
    id?: string
    eventType: string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: number
    keystrokeCount?: number
    focusLossCount?: number
    tabSwitches?: number
    windowBlurCount?: number
    recordedAt?: Date | string
  }

  export type IdentityVerificationCreateManySessionInput = {
    id?: string
    verificationType: string
    referenceImageUrl?: string | null
    verificationImageUrl?: string | null
    confidenceScore?: number | null
    verificationResult?: string | null
    failureReason?: string | null
    verifiedAt?: Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlagiarismReportCreateManySessionInput = {
    id?: string
    submissionId?: string | null
    language?: string | null
    similarityScore?: number | null
    matchesFound?: number
    reportUrl?: string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: Date | string
    status?: string
  }

  export type AdminInterventionCreateManySessionInput = {
    id?: string
    adminId: bigint | number
    interventionType: string
    message?: string | null
    actionTaken?: string | null
    createdAt?: Date | string
    resolved?: boolean
    resolutionNotes?: string | null
  }

  export type ViolationUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViolationUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ViolationUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    confidence?: FloatFieldUpdateOperationsInput | number
    severity?: StringFieldUpdateOperationsInput | string
    screenshotUrl?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    detectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processed?: BoolFieldUpdateOperationsInput | boolean
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionAnalyticUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionAnalyticUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionAnalyticUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    eventData?: NullableJsonNullValueInput | InputJsonValue
    mouseMovements?: IntFieldUpdateOperationsInput | number
    keystrokeCount?: IntFieldUpdateOperationsInput | number
    focusLossCount?: IntFieldUpdateOperationsInput | number
    tabSwitches?: IntFieldUpdateOperationsInput | number
    windowBlurCount?: IntFieldUpdateOperationsInput | number
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IdentityVerificationUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IdentityVerificationUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    verificationType?: StringFieldUpdateOperationsInput | string
    referenceImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationImageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    verificationResult?: NullableStringFieldUpdateOperationsInput | string | null
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biometricData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlagiarismReportUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PlagiarismReportUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PlagiarismReportUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    similarityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    matchesFound?: IntFieldUpdateOperationsInput | number
    reportUrl?: NullableStringFieldUpdateOperationsInput | string | null
    reportData?: NullableJsonNullValueInput | InputJsonValue
    generatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AdminInterventionUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminInterventionUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminInterventionUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    adminId?: BigIntFieldUpdateOperationsInput | bigint | number
    interventionType?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    actionTaken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolved?: BoolFieldUpdateOperationsInput | boolean
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProctoringSessionCountOutputTypeDefaultArgs instead
     */
    export type ProctoringSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProctoringSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProctoringSessionDefaultArgs instead
     */
    export type ProctoringSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProctoringSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViolationDefaultArgs instead
     */
    export type ViolationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViolationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionAnalyticDefaultArgs instead
     */
    export type SessionAnalyticArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionAnalyticDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IdentityVerificationDefaultArgs instead
     */
    export type IdentityVerificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IdentityVerificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlagiarismReportDefaultArgs instead
     */
    export type PlagiarismReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlagiarismReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminInterventionDefaultArgs instead
     */
    export type AdminInterventionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminInterventionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}