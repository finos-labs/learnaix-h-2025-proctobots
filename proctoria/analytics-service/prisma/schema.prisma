generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProctoringSession {
  id                 String    @id @default(uuid())
  userId             BigInt
  quizId             BigInt
  sessionToken       String    @unique
  startTime          DateTime  @default(now())
  endTime            DateTime?
  status             String    @default("active")
  riskScore          Float     @default(0.0)
  violationsCount    Int       @default(0)
  identityVerified   Boolean   @default(false)
  ipAddress          String?
  userAgent          String?
  browserFingerprint String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  violations             Violation[]
  analytics              SessionAnalytic[]
  identityVerifications  IdentityVerification[]
  plagiarismReports      PlagiarismReport[]
  adminInterventions     AdminIntervention[]

  @@map("proctoring_sessions")
}

model Violation {
  id           String           @id @default(uuid())
  sessionId    String
  type         String
  description  String?
  confidence   Float            @default(0.0)
  severity     String           @default("medium")
  screenshotUrl String?
  metadata     Json?
  detectedAt   DateTime         @default(now())
  processed    Boolean          @default(false)
  actionTaken  String?

  session      ProctoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("violations")
}

model SessionAnalytic {
  id                String           @id @default(uuid())
  sessionId         String
  eventType         String
  eventData         Json?
  mouseMovements    Int              @default(0)
  keystrokeCount    Int              @default(0)
  focusLossCount    Int              @default(0)
  tabSwitches       Int              @default(0)
  windowBlurCount   Int              @default(0)
  recordedAt        DateTime         @default(now())

  session           ProctoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("session_analytics")
}

model IdentityVerification {
  id                    String           @id @default(uuid())
  sessionId             String
  verificationType      String
  referenceImageUrl     String?
  verificationImageUrl  String?
  confidenceScore       Float?
  verificationResult    String?
  failureReason         String?
  verifiedAt            DateTime         @default(now())
  biometricData         Json?

  session               ProctoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("identity_verifications")
}

model PlagiarismReport {
  id               String           @id @default(uuid())
  sessionId        String
  submissionId     String?
  language         String?
  similarityScore  Float?
  matchesFound     Int              @default(0)
  reportUrl        String?
  reportData       Json?
  generatedAt      DateTime         @default(now())
  status           String           @default("pending")

  session          ProctoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("plagiarism_reports")
}

model AdminIntervention {
  id                String           @id @default(uuid())
  sessionId         String
  adminId           BigInt
  interventionType  String
  message           String?
  actionTaken       String?
  createdAt         DateTime         @default(now())
  resolved          Boolean          @default(false)
  resolutionNotes   String?

  session           ProctoringSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("admin_interventions")
}